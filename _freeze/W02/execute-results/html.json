{
  "hash": "802a33437510f53af9f138b87baa5d41",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"W#02 Data Visualization Data Formats\"\nsubtitle: \"Part 2 - A tour with code\"\nauthor: Jan Lorenz\nformat: \n  revealjs: \n    slide-number: true\n    chalkboard: \n      buttons: true\n    preview-links: false\n    logo: img/ConstructorUniversity.png\n    footer: \"MDSSB-DSCO-02: Data Science Concepts\"\n    smaller: true\neditor_options: \n  chunk_output_type: console\n---\n\n# Grammar of Graphics with `ggplot`\n\n## Let us walk through the workflow\n\nWe need the tidyverse packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\nWe use the `mpg` dataset which is in the ggplot library. Let's take a look:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mpg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 234\nColumns: 11\n$ manufacturer <chr> \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        <chr> \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        <dbl> 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         <int> 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          <int> 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        <chr> \"auto(l5)\", \"manual(m5)\", \"manual(m6)\", \"auto(av)\", \"auto…\n$ drv          <chr> \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"4\", \"4\", \"4\", \"4\", \"4…\n$ cty          <int> 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          <int> 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           <chr> \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p…\n$ class        <chr> \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"c…\n```\n\n\n:::\n\n```{.r .cell-code}\n?mpg # This shows the help https://ggplot2.tidyverse.org/reference/mpg.html\n```\n:::\n\n\n::: aside\nFor best learning, go through these slides and test the code!\n:::\n\n## First plot in a basic specification\n\nWe take `cty` = \"city miles per gallon\" as `x` and `hwy` = \"highway miles per gallon\" as `y`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg) + geom_point(mapping = aes(x = cty, y = hwy))\n```\n\n::: {.cell-output-display}\n![](W02_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nCompare to \"The complete template\" from the [cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf)\n\nIt has all the required elements: We specify the data in the ggplot command, and the aesthetics (what variable is x and what variable is y) as mapping in the geom-function. \n\n\n## `data` and `mapping` where?\n\nLooking at [`?ggplot`](https://ggplot2.tidyverse.org/reference/ggplot.html) and [`?geom_point`](https://ggplot2.tidyverse.org/reference/geom_point.html) we find that both need to specify `data` and `mapping`. \n\nWhy do we have it only once here?\n\n```R\nggplot(data = mpg) + geom_point(mapping = aes(x = cty, y = hwy))\n```\n. . . \n\n- The \"+\" in ggplot specifies that specifications will be taken from the object defined before the +.\n- Technically `ggplot()` creates an ggplot object (the graphic) and `+geom_point()` adds more information to it.\n- So, `data` was be taken from the `ggplot` call, and `mapping` from `geom_point`\n\n\n## It also works this way\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + geom_point(data = mpg, mapping = aes(x = cty, y = hwy)) # Same output as before ...\n```\n\n::: {.cell-output-display}\n![](W02_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n- In principle, we can specify new data and aesthetics in each geom-function in the same ggplot! Usually, we only have one dataset and one specification of aesthetics\n\n\n## And also this way\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_point() # Same output as before ...\n```\n\n::: {.cell-output-display}\n![](W02_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n::: aside\nThis is arguably the most common way. \n:::\n\n## Even shorter\n\nAs common practice we can shorten the code and remove the `data = ` and the `mapping = ` because the first argument will be taken as data (if not specified otherwise) and the second\nas mapping (if not specified otherwise). See function documentation [?ggplot](https://ggplot2.tidyverse.org/reference/ggplot)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = cty, y = hwy)) + geom_point() # Same output as before ...\n```\n\n::: {.cell-output-display}\n![](W02_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n## The shortest\n\nWe can even remove the \"x = \" and \"y = \" if we look at the specification of `aes()` in [`?aes`](https://ggplot2.tidyverse.org/reference/aes)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(cty, hwy)) + geom_point() # Same output as before ...\n```\n\n::: {.cell-output-display}\n![](W02_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## TESTING: Do the following lines work? \n\nIf not, why not? If yes, why?\n\n```R\nggplot(aes(x = cty, y = hwy), mpg) + geom_point()\nggplot(aes(x = cty, y = hwy), data = mpg) + geom_point()\nggplot(mapping = aes(x = cty, y = hwy)) + geom_point(mpg)\nggplot(aes(x = cty, y = hwy)) + geom_point(data = mpg)\nggplot(mpg,aes(hwy, x = cty)) + geom_point() \nggplot(mapping = aes(y = hwy, x = cty)) + geom_point(mpg) \n```\n\n. . .\n\nSolutions:  \n1 No, data must be first   \n2 Yes, with named argument `data = ` works also as second argument  \n3 No, data is missing   \n4 No, `aes()` is take wrongly as data in `ggplot`  \n5 Yes, x is specified with named argument, so the unnamed first argument is take as the second default argument  \n6 No, in `geom_point` the first argument is `mapping`, so it must be `aes()`\n\n\n## More aesthetics\n\ncolor, shape, size, fill ... \n\nThese need to be specified by name and cannot be left out.   \nLet us color the manufacturer, and make size by cylinders\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(cty, hwy, color = manufacturer, size = cyl)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](W02_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Do you like the plot?\n\nSome critique: \n\n1. Too many colors\n2. Looks like several points are in the same place but we do not see it.\n3. Sizes look \"unproportional\" (4 is too small)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(cty, hwy, color = manufacturer, size = cyl)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](W02_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Effective visualization is your task! \n\n- The three problems are not technical problems of ggplot.  \n- The grammar of graphics works fine. \n- Finding effective visualization is a core skill for a data scientist. \n- It develops naturally with practice.\n- It needs programming skills, but the essence of it is not programming!\n\n## Work with `scale_...` to modify aesthetic's look\n\nExample: Scale the size differently\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(cty, hwy, color = manufacturer, size = cyl)) + geom_point() +\n  scale_size_area()\n```\n\n::: {.cell-output-display}\n![](W02_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## Check overplotting with a *jitter*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(cty, hwy)) + geom_point() + geom_jitter(color = \"green\")\n```\n\n::: {.cell-output-display}\n![](W02_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nHere, we do two new things:\n\n1. We added another geom-function to an existing one. That is a core idea of the grammar of graphics.\n(However, for a final version, we would probably not do geom_point together with geom_jitter.)\n2. We specify the color by a word. Important: This is not within an `aes()` command!\n\n\n## Another example for two geoms\n\nAdd a smooth line as summary statistic\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(cty, hwy)) + geom_point() + geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](W02_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n## PUZZLE\n\nWhat happens here? Why does green become red???\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(cty, hwy, color = \"green\")) + geom_point() # Shows dots supposed to be \"green\" in red?\n```\n\n::: {.cell-output-display}\n![](W02_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n. . . \n\nThis is because \"green\" is taken here as a variable (with only one value for all data points).   \nSo, \"green\" is not a color but a string and ggplot chooses color automatically.\n\n. . . \n\nThis makes green points: \n\n```r\nggplot(mpg, aes(cty, hwy), color = \"green\") + geom_point()\n```\n\n## ggplot-Objects \n\n\n::: {.cell}\n\n```{.r .cell-code}\nour_plot <- ggplot(mpg, aes(cty, hwy)) + geom_point(aes(color = manufacturer))\n```\n:::\n\n\nThis creates no output!   \nThe graphic information is stored in the object `our_plot`.\n\n## Call the object\n\nAs with other objects, when we write it in the console as such it provides an answer. In the case of \nggplot-objects the answer is not some printed text in the console but a graphic output. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nour_plot\n```\n\n::: {.cell-output-display}\n![](W02_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## ggplot-Objects altered by more \"+...\"\n\nExample\n\n\n::: {.cell}\n\n```{.r .cell-code}\nour_plot + geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](W02_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n## Coordinate system specification\n\nExample\n\n\n::: {.cell}\n\n```{.r .cell-code}\nour_plot + coord_flip() # flip x and y\n```\n\n::: {.cell-output-display}\n![](W02_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n## Coordinate system specification\n\nExample\n\n\n::: {.cell}\n\n```{.r .cell-code}\nour_plot + coord_polar() # weird here but useful for some things\n```\n\n::: {.cell-output-display}\n![](W02_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n## Faceting based on another variable\n\nExample\n\n\n::: {.cell}\n\n```{.r .cell-code}\nour_plot + facet_wrap(\"manufacturer\")\n```\n\n::: {.cell-output-display}\n![](W02_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n## Faceting based on two other variables\n\nExample\n\n\n::: {.cell}\n\n```{.r .cell-code}\nour_plot + facet_grid(cyl ~ fl) # fl is the fuel type\n```\n\n::: {.cell-output-display}\n![](W02_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n## Scaling \n\nExample\n\n\n::: {.cell}\n\n```{.r .cell-code}\nour_plot + \n scale_x_log10() + \n scale_y_reverse() + \n scale_colour_hue(l = 70, c = 30)\n```\n\n::: {.cell-output-display}\n![](W02_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n## Axis limits and labels\n\nExample\n\n\n::: {.cell}\n\n```{.r .cell-code}\nour_plot + \n xlim(c(0,40)) + \n xlab(\"City miles per gallon\") + ylab(\"Highway miles per gallon\")\n```\n\n::: {.cell-output-display}\n![](W02_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n## Themes\n\nExample\n\n\n::: {.cell}\n\n```{.r .cell-code}\nour_plot + theme_bw()\n```\n\n::: {.cell-output-display}\n![](W02_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n## Themes\n\nExample\n\n\n::: {.cell}\n\n```{.r .cell-code}\nour_plot + theme_void()\n```\n\n::: {.cell-output-display}\n![](W02_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n## Themes\n\nExample\n\n\n::: {.cell}\n\n```{.r .cell-code}\nour_plot + theme_dark()\n```\n\n::: {.cell-output-display}\n![](W02_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n# Data Types and Tidy Data\n\n## Let us test coercion\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- TRUE\ny <- 2L\nz <- 3\na <- \"4\"\n```\n:::\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nc(x,y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2\n```\n\n\n:::\n:::\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nc(y,z) |> typeof()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n:::\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nc(z,a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"3\" \"4\"\n```\n\n\n:::\n:::\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nc(x,a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"TRUE\" \"4\"   \n```\n\n\n:::\n:::\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nc(c(x,y),a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1\" \"2\" \"4\"\n```\n\n\n:::\n:::\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nx + y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nas.numeric(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nx == 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nas.character(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2\"\n```\n\n\n:::\n:::\n\n\nWhat about \n```r\nz + a\n```\n\n. . .\n\nNot possible, because stings cannot be added. \n\n\n## Danger! Floating point numbers\n\nWe define `a` and `b` such that their are both 0.1 mathematically.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 0.1 + 0.2 - 0.2\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- 0.1\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1\n```\n\n\n:::\n:::\n\n\nBut why is this false?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(a - b) == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n. . . \n\n\n::: {.cell}\n\n```{.r .cell-code}\na - b\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.775558e-17\n```\n\n\n:::\n:::\n\n\nAha, the difference is about $2.8 \\times 10^{-17}$ (The `e` stands for [scientific notation](https://en.wikipedia.org/wiki/Scientific_notation), learn to read it!)\nSuch problems can happen when subtracting and comparing floating point numbers!\n\n\n## Tidying\n\nWhat is tidy depends to some extent on the purpose you want to use the data for.\n\nLet us practice the two important commands\n\n`pivot_longer`\n\n`pivot_wider`\n\n\n## `pivot_longer`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_wide <- tibble(\n  id = 1:3,\n  height_2023 = c(150, 160, 170),\n  height_2024 = c(152, 162, 172)\n)\ndata_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n     id height_2023 height_2024\n  <int>       <dbl>       <dbl>\n1     1         150         152\n2     2         160         162\n3     3         170         172\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_longer <- pivot_longer(data = data_wide, \n                            cols = c(height_2023, height_2024),\n                            names_to = \"year\", values_to = \"height\")\ndata_longer\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n     id year        height\n  <int> <chr>        <dbl>\n1     1 height_2023    150\n2     1 height_2024    152\n3     2 height_2023    160\n4     2 height_2024    162\n5     3 height_2023    170\n6     3 height_2024    172\n```\n\n\n:::\n:::\n\n\n## Input: The pipe `|>`\n\nIn data wrangling it is common to do various data manipulations one after the other.  \nA common tool is to use the pipe to give it an ordered structure in the writing. \n\nThe basic idea is:   \n**Put what is before the pipe `|>` as the first argument of the function coming after.** \n\nWhen `do_this` is a function and `to_this` is an object like a dataframe then \n\n```R\ndo_this(to_this)\n```R\n\nis the same as \n```R\nto_this |> do_this()\n```\n\n. . .\n\nIt also works for longer nested functions:\n\n```R\nfunction3(function2(function1(data)))\n```\n\nis the same as \n```R\ndata |> function1() |> function2() |> function3()\n```\n\n\n\n\n\n\n## With the pipe\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_longer <- data_wide |> \n pivot_longer(cols = c(height_2023, height_2024),\n              names_to = \"year\", values_to = \"height\")\ndata_longer\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n     id year        height\n  <int> <chr>        <dbl>\n1     1 height_2023    150\n2     1 height_2024    152\n3     2 height_2023    160\n4     2 height_2024    162\n5     3 height_2023    170\n6     3 height_2024    172\n```\n\n\n:::\n:::\n\n\n. . .\n\n`year` does not look good! We want numbers.\n\n. . .\n\nLet's do a string mutate:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_longer <- data_longer |> \n  mutate(year = str_remove(year, \"height_\"))\ndata_longer\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n     id year  height\n  <int> <chr>  <dbl>\n1     1 2023     150\n2     1 2024     152\n3     2 2023     160\n4     2 2024     162\n5     3 2023     170\n6     3 2024     172\n```\n\n\n:::\n:::\n\n\n. . . \n\n\n## But `year` still a character variable!\n\nWe mutate further:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_longer <- data_longer |> \n  mutate(year = as.numeric(year))\ndata_longer\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n     id  year height\n  <int> <dbl>  <dbl>\n1     1  2023    150\n2     1  2024    152\n3     2  2023    160\n4     2  2024    162\n5     3  2023    170\n6     3  2024    172\n```\n\n\n:::\n:::\n\n\nThat is fine. \n\n## Back to wide: `pivot_wider`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_longer |> \n  pivot_wider(names_from = year, \n              values_from = height)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n     id `2023` `2024`\n  <int>  <dbl>  <dbl>\n1     1    150    152\n2     2    160    162\n3     3    170    172\n```\n\n\n:::\n:::\n\n\n. . .\n\nOK, but now we have just numbers as variable names. Can we get `height_` prefix back?\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_longer |> \n  pivot_wider(names_from = year, \n              values_from = height,\n              names_prefix = \"height_\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n     id height_2023 height_2024\n  <int>       <dbl>       <dbl>\n1     1         150         152\n2     2         160         162\n3     3         170         172\n```\n\n\n:::\n:::\n\n\n## Summary piping and tidying\n\nA small data science task often boils down to one line of code using pipes like\n\n```R\ndata |> wrangling_functions(*specifications*) |> tidying(*to_bring_in_shape*) |> ggpplot()\n```\n\n(For R it is one line, but we may break it into several for a better overview.)\n\n- Piping is a natural way of thinking in data science, so we also program that way.\n- Tidying (for example `pivot_longer`) is often needed directly before a ggplot command. \n- Tidying often require some string manipulations making new variables and variable names nice. \n\n. . .\n\nHow can I learn all this? [[Practice, practice, practice, ...]{style=\"color:red;\"}]{.fragment}  \nDo I need to learn it again for python?? [[Yes, but it is easier knowing the concept!]{style=\"color:red;\"}]{.fragment}\n\n. . . \n\n**When learning, learn the concept not just get the code done!**",
    "supporting": [
      "W02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}