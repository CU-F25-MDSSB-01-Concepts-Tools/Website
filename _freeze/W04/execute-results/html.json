{
  "hash": "3d2c528e0cfce5ace3f36a4e8ebc8fd3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"W#04: Relational Data, Math: Sets and Functions, Programming Functions\"\nauthor: Jan Lorenz\nformat: \n  revealjs: \n    toc: true\n    toc-depth: 1\n    slide-number: true\n    chalkboard: \n      buttons: true\n    logo: img/ConstructorUniversity.png    \n    footer: \"MDSSB-DSCO-02: Data Science Concepts\"\nbibliography: \"/home/janlo/Documents/literature/litlorenz_zot.bib\"\n---\n\n\n## Preliminaries {.smaller}\n\nIn this lectures we will use these packages and datasets. You need to do this code in the Console to download data and play with some of the code in this lecture. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nycflights13)\nlibrary(tidyverse)\nif (!file.exists(\"data/hotels.csv\")) {\n  download.file(url = \"https://raw.githubusercontent.com/rstudio-education/datascience-box/main/course-materials/_slides/u2-d06-grammar-wrangle/data/hotels.csv\", \n                destfile = \"data/hotels.csv\")\n}\nif (!file.exists(\"data/professions.csv\")) {\n  download.file(url = \"https://raw.githubusercontent.com/rstudio-education/datascience-box/main/course-materials/_slides/u2-d08-multi-df/data/professions.csv\", \n                destfile = \"data/professions.csv\")\n}\nif (!file.exists(\"data/dates.csv\")) {\n  download.file(url = \"https://raw.githubusercontent.com/rstudio-education/datascience-box/main/course-materials/_slides/u2-d08-multi-df/data/dates.csv\", \n                destfile = \"data/dates.csv\")\n}\nif (!file.exists(\"data/works.csv\")) {\n  download.file(url = \"https://raw.githubusercontent.com/rstudio-education/datascience-box/main/course-materials/_slides/u2-d08-multi-df/data/works.csv\", \n                destfile = \"data/qorks.csv\")\n}\n```\n:::\n\n::: aside\nTip: Run the script in an R-project and have a folder `data/` in it such that the local path works!\n:::\n\n\n# Strings and Special Values\n\n## String modification {.smaller}\n\nWe modify strings with the [`stringr`](https://stringr.tidyverse.org/) package from the tidyverse core. \nAll functions from `stringr` start with `str_`. \n\nVery few examples:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(\"x\",\"y\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"x\" \"y\"\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_c(\"x\",\"y\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"xy\"\n```\n\n\n:::\n:::\n\n\n. . . \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_c(\"x\",\"y\",\"z\", sep=\",\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"x,y,z\"\n```\n\n\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(c(\"x\",\"y\",\"z\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_length(c(\"x\",\"y\",\"z\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 1 1\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_length(c(\"This is a string.\",\"z\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 17  1\n```\n\n\n:::\n:::\n\n\n\n## String wrangling with variable names {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- tibble(Name = c(\"A\",\"B\",\"C\"), Age_2020 = c(20,30,40), Age_2021 = c(21,31,41), Age_2022 = c(22,32,42))\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  Name  Age_2020 Age_2021 Age_2022\n  <chr>    <dbl>    <dbl>    <dbl>\n1 A           20       21       22\n2 B           30       31       32\n3 C           40       41       42\n```\n\n\n:::\n:::\n\n\nWe tidy that data set by creating a year variable.\n\n. . .\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\ndata |> pivot_longer(c(\"Age_2020\", \"Age_2021\", \"Age_2022\"), names_to = \"Year\", values_to=\"Age\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 3\n  Name  Year       Age\n  <chr> <chr>    <dbl>\n1 A     Age_2020    20\n2 A     Age_2021    21\n3 A     Age_2022    22\n4 B     Age_2020    30\n5 B     Age_2021    31\n6 B     Age_2022    32\n7 C     Age_2020    40\n8 C     Age_2021    41\n9 C     Age_2022    42\n```\n\n\n:::\n:::\n\n\n. . . \n\nOK, but the year variable is a string but we want numbers.\n\n## Use `word` {.smaller}\n\n`word` extracts words from a sentence. However, the separator need not be `\" \"` but can be any character.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword(\"This is a string.\", start=2, end=-2) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"is a\"\n```\n\n\n:::\n\n```{.r .cell-code}\n#Selects from the second to the second last word.\nword(\"Age_2022\", start=2, sep = \"_\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2022\"\n```\n\n\n:::\n:::\n\n\n. . .\n\nIt also works vectorized. \n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\ndata |> pivot_longer(c(\"Age_2020\", \"Age_2021\", \"Age_2022\"), names_to = \"Year\", values_to=\"Age\") |> \n  mutate(Year = word(Year, start = 2, sep = \"_\") |> as.numeric())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 3\n  Name   Year   Age\n  <chr> <dbl> <dbl>\n1 A      2020    20\n2 A      2021    21\n3 A      2022    22\n4 B      2020    30\n5 B      2021    31\n6 B      2022    32\n7 C      2020    40\n8 C      2021    41\n9 C      2022    42\n```\n\n\n:::\n:::\n\n\n\n## String Detection / Regular Expressions {.smaller}\n\nMany `stringr` function follow the structure `(string, pattern)`.  \n`string` is  in our data, `pattern` is a string interpreted as a [**Regular Expressions**](https://en.wikipedia.org/wiki/Regular_expression)\n\nA few examples show its power:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfruits <- c(\"apple\", \"pineapple\", \"Pear\", \"orange\", \"peach\", \"banana\")\nstr_detect(fruits,\"apple\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE  TRUE FALSE FALSE FALSE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_extract(fruits,\"apple\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"apple\" \"apple\" NA      NA      NA      NA     \n```\n\n\n:::\n\n```{.r .cell-code}\nstr_extract(fruits,\"[Pp][a-z]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"pp\" \"pi\" \"Pe\" NA   \"pe\" NA  \n```\n\n\n:::\n\n```{.r .cell-code}\nstr_extract(fruits,\"^[Pp][a-z]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA   \"pi\" \"Pe\" NA   \"pe\" NA  \n```\n\n\n:::\n\n```{.r .cell-code}\nstr_extract(fruits,\"^[Pp][a-z]{3}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA     \"pine\" \"Pear\" NA     \"peac\" NA    \n```\n\n\n:::\n\n```{.r .cell-code}\nstr_extract(fruits,\"^[Pp][a-z]+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA          \"pineapple\" \"Pear\"      NA          \"peach\"     NA         \n```\n\n\n:::\n:::\n\n\n## Regular Expressions {.smaller}\n\n**Regular expressions** (short *regexp* or *regex*): Character-Sequences specifying *match patterns*. \n\n- Useful when strings contain unstructured or semi-structured data. \n\n- When you first look at a regexp, you'll think a cat walked across your keyboard, but as your understanding improves they will start to make sense. (Or you ask an AI chatbot to give you what you need 🙂)\n\n**Guess what this regexp's are to match?**\n\n``\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"``\n\n``\"^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$\"``\n\n``\"\"^[[:alnum:].-_]+@[[:alnum:].-]+$\"\"``\n\n. . . \n\nEmail addresses! However, this is not the perfect solution...\n\nDig deeper: Read the discussion and see the example in [How can I validate an email address using a regular expression?](https://stackoverflow.com/questions/201323/how-can-i-validate-an-email-address-using-a-regular-expression) at stackoverflow. \n# Special Values for \"no\" data\n\n## Special values  {.smaller}\n\nYou should know the differences of special values. \n\n- `NA`: Not available (string, number, or whatever vector entry)\n- `NULL`: Null object, the undefined object, e.g. an empty list or an empty list element\n- `NaN`: For numbers: Meaning \"Not a Number\" (when math cannot solve what you want)\n- `Inf`: For numbers: Positive infinity \n- `-Inf`: For numbers: Negative infinity\n\nCheck some math:\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n1/0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Inf\n```\n\n\n:::\n:::\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n-1/0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -Inf\n```\n\n\n:::\n:::\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n0/0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NaN\n```\n\n\n:::\n:::\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n1/0 + 1/0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Inf\n```\n\n\n:::\n:::\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n1/0 - 1/0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NaN\n```\n\n\n:::\n:::\n\n\n## `NA`s  {.smaller}\n\nInstead of `NaN`, `NA` stands for genuinely unknown values.   \nIt can also be in a character of logical vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = c(1, 2, 3, 4, NA)\nmean(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(x, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.5\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n   1.00    1.75    2.50    2.50    3.25    4.00       1 \n```\n\n\n:::\n:::\n\n\n. . .\n\nThe type of `NA` is logical. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(NA)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(NaN)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n:::\n\n\nDoes it make sense? Let us look at `NA`'s in logical operations. \n\n## `NA`s in logical operations\n\n`NA` can be TRUE or FALSE. \n\nUsually operations including `NA` results again in `NA`, but some not!\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nNA & TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n:::\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nNA | TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nNA & FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nNA | FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n:::\n\n\nUnderstanding logical operations is important!\n\n\n## `NULL` is the null object {.smaller}\n\n- used to represent lists with zero length\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:10\nattributes(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n:::\n\n\n- used as a placeholder for missing values in lists and dataframes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL <- list(a = 1)\nL[[3]] <- 5\nL\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$a\n[1] 1\n\n[[2]]\nNULL\n\n[[3]]\n[1] 5\n```\n\n\n:::\n:::\n\n\n# Relational Data - Joining\n\n## Working with more dataframes {.smaller}\n\n- Data can be distributed in several dataframes which have relations which each other. \n- For example, they share variables as the five dataframes in `nycflights13`.\n\n![](img/nycflights13_data.png){height=300}\n\n:::{.aside}\nOften variables in different dataframe have the same name, but that need not be the case! See the variable `faa` in `airports` matches `origin` and `dest` in `flights`.\n:::\n\n\n## Data: Women in science {.smaller}\n\n10 women in science who changed the world: \nAda Lovelace, Marie Curie, Janaki Ammal, Chien-Shiung Wu, Katherine Johnson, Rosalind Franklin, Vera Rubin, Gladys West, Flossie Wong-Staal, Jennifer Doudna\n\n\n::: {.panel-tabset}\n\n#### Professions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofessions <- read_csv(\"data/professions.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 10 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): name, profession\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nprofessions\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 2\n   name               profession                        \n   <chr>              <chr>                             \n 1 Ada Lovelace       Mathematician                     \n 2 Marie Curie        Physicist and Chemist             \n 3 Janaki Ammal       Botanist                          \n 4 Chien-Shiung Wu    Physicist                         \n 5 Katherine Johnson  Mathematician                     \n 6 Rosalind Franklin  Chemist                           \n 7 Vera Rubin         Astronomer                        \n 8 Gladys West        Mathematician                     \n 9 Flossie Wong-Staal Virologist and Molecular Biologist\n10 Jennifer Doudna    Biochemist                        \n```\n\n\n:::\n:::\n\n\n#### Dates\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndates <- read_csv(\"data/dates.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 8 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): name\ndbl (2): birth_year, death_year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\ndates\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n  name               birth_year death_year\n  <chr>                   <dbl>      <dbl>\n1 Janaki Ammal             1897       1984\n2 Chien-Shiung Wu          1912       1997\n3 Katherine Johnson        1918       2020\n4 Rosalind Franklin        1920       1958\n5 Vera Rubin               1928       2016\n6 Gladys West              1930         NA\n7 Flossie Wong-Staal       1947         NA\n8 Jennifer Doudna          1964         NA\n```\n\n\n:::\n:::\n\n\n#### Works\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworks <- read_csv(\"data/works.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 9 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): name, known_for\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nworks\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 2\n  name               known_for                                                  \n  <chr>              <chr>                                                      \n1 Ada Lovelace       first computer algorithm                                   \n2 Marie Curie        theory of radioactivity,  discovery of elements polonium a…\n3 Janaki Ammal       hybrid species, biodiversity protection                    \n4 Chien-Shiung Wu    confim and refine theory of radioactive beta decy, Wu expe…\n5 Katherine Johnson  calculations of orbital mechanics critical to sending the …\n6 Vera Rubin         existence of dark matter                                   \n7 Gladys West        mathematical modeling of the shape of the Earth which serv…\n8 Flossie Wong-Staal first scientist to clone HIV and create a map of its genes…\n9 Jennifer Doudna    one of the primary developers of CRISPR, a ground-breaking…\n```\n\n\n:::\n:::\n\n:::\n\n\n:::{.aside}\nSource: [Discover Magazine](https://www.discovermagazine.com/the-sciences/meet-10-women-in-science-who-changed-the-world)\n\nThe data can be downloaded: [professions.csv](https://raw.githubusercontent.com/rstudio-education/datascience-box/main/course-materials/_slides/u2-d08-multi-df/data/scientists/professions.csv), [dates.csv](https://raw.githubusercontent.com/rstudio-education/datascience-box/main/course-materials/_slides/u2-d08-multi-df/data/scientists/dates.csv), \n[works.csv](https://raw.githubusercontent.com/rstudio-education/datascience-box/main/course-materials/_slides/u2-d08-multi-df/data/scientists/works.csv)\n:::\n\n## We want this dataframe {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofessions  |> left_join(dates) |> left_join(works)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(name)`\nJoining with `by = join_by(name)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 5\n   name               profession                 birth_year death_year known_for\n   <chr>              <chr>                           <dbl>      <dbl> <chr>    \n 1 Ada Lovelace       Mathematician                      NA         NA first co…\n 2 Marie Curie        Physicist and Chemist              NA         NA theory o…\n 3 Janaki Ammal       Botanist                         1897       1984 hybrid s…\n 4 Chien-Shiung Wu    Physicist                        1912       1997 confim a…\n 5 Katherine Johnson  Mathematician                    1918       2020 calculat…\n 6 Rosalind Franklin  Chemist                          1920       1958 <NA>     \n 7 Vera Rubin         Astronomer                       1928       2016 existenc…\n 8 Gladys West        Mathematician                    1930         NA mathemat…\n 9 Flossie Wong-Staal Virologist and Molecular …       1947         NA first sc…\n10 Jennifer Doudna    Biochemist                       1964         NA one of t…\n```\n\n\n:::\n:::\n\n\n## Joining dataframes {.smaller}\n\n`something_join(x, y)`^[The notion *join* comes from SQL database. In other data manipulation frameworks joining is called *merging*.] for dataframes `x` and `y` which have a *relation*\n\n- `left_join()`: all rows from x\n- `right_join()`: all rows from y\n- `full_join()`: all rows from both x and y\n- `inner_join()`: all rows from x where there are matching values in y, return all combination of multiple matches in the case of multiple matches\n- ...\n\n## Simple setup for `x` and `y` {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- tibble(\n  id = c(1, 2, 3),\n  value_x = c(\"x1\", \"x2\", \"x3\")\n  )\ny <- tibble(\n  id = c(1, 2, 4),\n  value_y = c(\"y1\", \"y2\", \"y4\")\n  )\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n     id value_x\n  <dbl> <chr>  \n1     1 x1     \n2     2 x2     \n3     3 x3     \n```\n\n\n:::\n\n```{.r .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n     id value_y\n  <dbl> <chr>  \n1     1 y1     \n2     2 y2     \n3     4 y4     \n```\n\n\n:::\n:::\n\n\n## `left_join()`\n\n:::{.columns}\n:::{.column width=50%}\n![](img/left-join.gif)\n:::\n:::{.column}\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(id)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n     id value_x value_y\n  <dbl> <chr>   <chr>  \n1     1 x1      y1     \n2     2 x2      y2     \n3     3 x3      <NA>   \n```\n\n\n:::\n:::\n\n:::\n:::\n\n## `right_join()`\n\n:::{.columns}\n:::{.column width=50%}\n![](img/right-join.gif)\n:::\n:::{.column}\n\n::: {.cell}\n\n```{.r .cell-code}\nright_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(id)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n     id value_x value_y\n  <dbl> <chr>   <chr>  \n1     1 x1      y1     \n2     2 x2      y2     \n3     4 <NA>    y4     \n```\n\n\n:::\n:::\n\n:::\n:::\n\n\n## `full_join()`\n\n:::{.columns}\n:::{.column width=50%}\n![](img/full-join.gif)\n:::\n:::{.column}\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(id)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n     id value_x value_y\n  <dbl> <chr>   <chr>  \n1     1 x1      y1     \n2     2 x2      y2     \n3     3 x3      <NA>   \n4     4 <NA>    y4     \n```\n\n\n:::\n:::\n\n:::\n:::\n\n\n## `inner_join()`\n\n:::{.columns}\n:::{.column width=50%}\n![](img/inner-join.gif)\n:::\n:::{.column}\n\n::: {.cell}\n\n```{.r .cell-code}\ninner_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(id)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n     id value_x value_y\n  <dbl> <chr>   <chr>  \n1     1 x1      y1     \n2     2 x2      y2     \n```\n\n\n:::\n:::\n\n:::\n:::\n\n## Women in science {.smaller}\n\n:::{.panel-tabset}\n\n#### `left_join`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofessions |> left_join(works)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(name)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 3\n   name               profession                         known_for              \n   <chr>              <chr>                              <chr>                  \n 1 Ada Lovelace       Mathematician                      first computer algorit…\n 2 Marie Curie        Physicist and Chemist              theory of radioactivit…\n 3 Janaki Ammal       Botanist                           hybrid species, biodiv…\n 4 Chien-Shiung Wu    Physicist                          confim and refine theo…\n 5 Katherine Johnson  Mathematician                      calculations of orbita…\n 6 Rosalind Franklin  Chemist                            <NA>                   \n 7 Vera Rubin         Astronomer                         existence of dark matt…\n 8 Gladys West        Mathematician                      mathematical modeling …\n 9 Flossie Wong-Staal Virologist and Molecular Biologist first scientist to clo…\n10 Jennifer Doudna    Biochemist                         one of the primary dev…\n```\n\n\n:::\n:::\n\n\n#### `right_join`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofessions |> right_join(works)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(name)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 3\n  name               profession                         known_for               \n  <chr>              <chr>                              <chr>                   \n1 Ada Lovelace       Mathematician                      first computer algorithm\n2 Marie Curie        Physicist and Chemist              theory of radioactivity…\n3 Janaki Ammal       Botanist                           hybrid species, biodive…\n4 Chien-Shiung Wu    Physicist                          confim and refine theor…\n5 Katherine Johnson  Mathematician                      calculations of orbital…\n6 Vera Rubin         Astronomer                         existence of dark matter\n7 Gladys West        Mathematician                      mathematical modeling o…\n8 Flossie Wong-Staal Virologist and Molecular Biologist first scientist to clon…\n9 Jennifer Doudna    Biochemist                         one of the primary deve…\n```\n\n\n:::\n:::\n\n\n#### `full_join`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndates |> full_join(works)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(name)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 4\n   name               birth_year death_year known_for                           \n   <chr>                   <dbl>      <dbl> <chr>                               \n 1 Janaki Ammal             1897       1984 hybrid species, biodiversity protec…\n 2 Chien-Shiung Wu          1912       1997 confim and refine theory of radioac…\n 3 Katherine Johnson        1918       2020 calculations of orbital mechanics c…\n 4 Rosalind Franklin        1920       1958 <NA>                                \n 5 Vera Rubin               1928       2016 existence of dark matter            \n 6 Gladys West              1930         NA mathematical modeling of the shape …\n 7 Flossie Wong-Staal       1947         NA first scientist to clone HIV and cr…\n 8 Jennifer Doudna          1964         NA one of the primary developers of CR…\n 9 Ada Lovelace               NA         NA first computer algorithm            \n10 Marie Curie                NA         NA theory of radioactivity,  discovery…\n```\n\n\n:::\n:::\n\n\n#### `inner_join`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndates |> inner_join(works)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(name)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 4\n  name               birth_year death_year known_for                            \n  <chr>                   <dbl>      <dbl> <chr>                                \n1 Janaki Ammal             1897       1984 hybrid species, biodiversity protect…\n2 Chien-Shiung Wu          1912       1997 confim and refine theory of radioact…\n3 Katherine Johnson        1918       2020 calculations of orbital mechanics cr…\n4 Vera Rubin               1928       2016 existence of dark matter             \n5 Gladys West              1930         NA mathematical modeling of the shape o…\n6 Flossie Wong-Staal       1947         NA first scientist to clone HIV and cre…\n7 Jennifer Doudna          1964         NA one of the primary developers of CRI…\n```\n\n\n:::\n:::\n\n\n\n#### Final\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofessions |> left_join(dates) |> left_join(works)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(name)`\nJoining with `by = join_by(name)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 5\n   name               profession                 birth_year death_year known_for\n   <chr>              <chr>                           <dbl>      <dbl> <chr>    \n 1 Ada Lovelace       Mathematician                      NA         NA first co…\n 2 Marie Curie        Physicist and Chemist              NA         NA theory o…\n 3 Janaki Ammal       Botanist                         1897       1984 hybrid s…\n 4 Chien-Shiung Wu    Physicist                        1912       1997 confim a…\n 5 Katherine Johnson  Mathematician                    1918       2020 calculat…\n 6 Rosalind Franklin  Chemist                          1920       1958 <NA>     \n 7 Vera Rubin         Astronomer                       1928       2016 existenc…\n 8 Gladys West        Mathematician                    1930         NA mathemat…\n 9 Flossie Wong-Staal Virologist and Molecular …       1947         NA first sc…\n10 Jennifer Doudna    Biochemist                       1964         NA one of t…\n```\n\n\n:::\n:::\n\n\n:::\n\n## Keys {.smaller}\n\n- A **key** is a variable or a set of variables which uniquely identifies observations\n- What was the key in the dataframe of women in science? [`name`]{.fragment}\n\n. . . \n\n- Switching back to `nycflights13` as example\n- In simple cases, a single variable is sufficient to identify an observation, e.g. each plane in `planes` is identified by `tailnum`.\n- Sometimes, multiple variables are needed; e.g. to identify an observation in\n`weather` you need five variables: `year`, `month`, `day`, `hour`, and `origin`\n\n## How can we check? {.smaller .scrollable}\n\nCounting observation and filter those more than one\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nycflights13)\nplanes |> count(tailnum) |> filter(n > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 2\n# ℹ 2 variables: tailnum <chr>, n <int>\n```\n\n\n:::\n\n```{.r .cell-code}\nweather |> count(year, month, day, hour, origin) |> filter(n > 1) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 6\n   year month   day  hour origin     n\n  <int> <int> <int> <int> <chr>  <int>\n1  2013    11     3     1 EWR        2\n2  2013    11     3     1 JFK        2\n3  2013    11     3     1 LGA        2\n```\n\n\n:::\n:::\n\n\nOK, here 3 observations are twice, one for each airport. Probably this is related to [Daylight saving time](https://en.wikipedia.org/wiki/Daylight_saving_time) in the US. In Fall clocks are turned back 1 hour. So this hour appears twice. \n\nExample: Without hour it is not a key\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather |> count(year, month, day, origin) |> filter(n > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,092 × 5\n    year month   day origin     n\n   <int> <int> <int> <chr>  <int>\n 1  2013     1     1 EWR       22\n 2  2013     1     1 JFK       22\n 3  2013     1     1 LGA       23\n 4  2013     1     2 EWR       24\n 5  2013     1     2 JFK       24\n 6  2013     1     2 LGA       24\n 7  2013     1     3 EWR       24\n 8  2013     1     3 JFK       24\n 9  2013     1     3 LGA       24\n10  2013     1     4 EWR       24\n# ℹ 1,082 more rows\n```\n\n\n:::\n:::\n\n\nWhy do we have only 22 and 23 on day 1 of month 1? No idea. Dig deeper yourself!\n\n## Terminology: Primary and foreign keys  {.smaller}\n\n- A **primary key** uniquely identifies an observation in its own table. E.g,\n`planes$tailnum` in `planes`. \n- A **foreign key** uniquely identifies an observation in another dataframe E.g.\n`flights$tailnum` is a foreign key in `flights` because it matches each flight to a unique plane in `planes`.\n\n- A primary key and a foreign key form a relation. \n- Relations are typically 1-to-many. Each plane has many flights\n- Relations can also be many-to-many. Airlines can fly to many airports; airport can host many airplanes.\n\n\n## Joining when key names differ? {.smaller .scrollable}\n\nWe have to specify the key relation with a named vector in the `by` argument. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 336776     19\n```\n\n\n:::\n\n```{.r .cell-code}\nflights |> left_join(airports, by = c(\"dest\" = \"faa\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 26\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 18 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>, name <chr>, lat <dbl>,\n#   lon <dbl>, alt <dbl>, tz <dbl>, dst <chr>, tzone <chr>\n```\n\n\n:::\n:::\n\n\nThe alternative (new default) version is to use the `join_by` function using the comparison sign `==`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> left_join(airports, join_by(\"dest\" == \"faa\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 26\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 18 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>, name <chr>, lat <dbl>,\n#   lon <dbl>, alt <dbl>, tz <dbl>, dst <chr>, tzone <chr>\n```\n\n\n:::\n:::\n\n\n**Why does the number of rows stays the same after joining?**\n\n. . .\n\n`faa` is a primary key in `airports`. It is matched with `dest` as the foreign key in `flights`. \n\n\n\n## `left_join` is *essentially* `right_join` with switched dataframes {.smaller .scrollable}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nairports_right_flights <- airports |> right_join(flights, by = c(\"faa\" = \"dest\"))\nairports_right_flights \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 26\n   faa   name       lat   lon   alt    tz dst   tzone  year month   day dep_time\n   <chr> <chr>    <dbl> <dbl> <dbl> <dbl> <chr> <chr> <int> <int> <int>    <int>\n 1 ABQ   Albuque…  35.0 -107.  5355    -7 A     Amer…  2013    10     1     1955\n 2 ABQ   Albuque…  35.0 -107.  5355    -7 A     Amer…  2013    10     2     2010\n 3 ABQ   Albuque…  35.0 -107.  5355    -7 A     Amer…  2013    10     3     1955\n 4 ABQ   Albuque…  35.0 -107.  5355    -7 A     Amer…  2013    10     4     2017\n 5 ABQ   Albuque…  35.0 -107.  5355    -7 A     Amer…  2013    10     5     1959\n 6 ABQ   Albuque…  35.0 -107.  5355    -7 A     Amer…  2013    10     6     1959\n 7 ABQ   Albuque…  35.0 -107.  5355    -7 A     Amer…  2013    10     7     2002\n 8 ABQ   Albuque…  35.0 -107.  5355    -7 A     Amer…  2013    10     8     1957\n 9 ABQ   Albuque…  35.0 -107.  5355    -7 A     Amer…  2013    10     9     1957\n10 ABQ   Albuque…  35.0 -107.  5355    -7 A     Amer…  2013    10    10     2011\n# ℹ 336,766 more rows\n# ℹ 14 more variables: sched_dep_time <int>, dep_delay <dbl>, arr_time <int>,\n#   sched_arr_time <int>, arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\nDifferences \n\n- In a join where keys have different column names the name of the first dataframe survives (unless you use `keep = TRUE`). Here, `faa` instead of `dest`\n- The columns from the first dataframe come first\n- The order of rows is taken from the first dataframe, while duplication and dropping of variables is determined by the second dataframe (because it is a `right_join`)\n\nUsing the fact that flights seem to be ordered by `year`, `month`, `day`, `dep_time` we can re-arrange:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nairports_right_flights |> \n  rename(dest = faa) |> \n  select(names(flights)) |> # Use order of flights\n  arrange(year, month, day, dep_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      924            917\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\nNote of caution: A deeper analysis shows that the order is still not exactly the same. \n\n## `left_join` with reversed dataframes {.smaller .scrollable}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(airports)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1458    8\n```\n\n\n:::\n\n```{.r .cell-code}\ndim(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 336776     19\n```\n\n\n:::\n\n```{.r .cell-code}\nairports |> \n  left_join(flights, by = c(\"faa\" = \"dest\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 330,531 × 26\n   faa   name      lat    lon   alt    tz dst   tzone  year month   day dep_time\n   <chr> <chr>   <dbl>  <dbl> <dbl> <dbl> <chr> <chr> <int> <int> <int>    <int>\n 1 04G   Lansdo…  41.1  -80.6  1044    -5 A     Amer…    NA    NA    NA       NA\n 2 06A   Moton …  32.5  -85.7   264    -6 A     Amer…    NA    NA    NA       NA\n 3 06C   Schaum…  42.0  -88.1   801    -6 A     Amer…    NA    NA    NA       NA\n 4 06N   Randal…  41.4  -74.4   523    -5 A     Amer…    NA    NA    NA       NA\n 5 09J   Jekyll…  31.1  -81.4    11    -5 A     Amer…    NA    NA    NA       NA\n 6 0A9   Elizab…  36.4  -82.2  1593    -5 A     Amer…    NA    NA    NA       NA\n 7 0G6   Willia…  41.5  -84.5   730    -5 A     Amer…    NA    NA    NA       NA\n 8 0G7   Finger…  42.9  -76.8   492    -5 A     Amer…    NA    NA    NA       NA\n 9 0P2   Shoest…  39.8  -76.6  1000    -5 U     Amer…    NA    NA    NA       NA\n10 0S9   Jeffer…  48.1 -123.    108    -8 A     Amer…    NA    NA    NA       NA\n# ℹ 330,521 more rows\n# ℹ 14 more variables: sched_dep_time <int>, dep_delay <dbl>, arr_time <int>,\n#   sched_arr_time <int>, arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n**Why does the number of rows changes after joining?**\n\n`dest` is not a primary key in `flights`. There are more flights with the same destination so rows of `airports` get duplicated.  \n\n**Why is the number of rows then less than the number of rows in flights?**  \n336776 flights and 330531 airports left joined by flights. \n\nLet us do some checks:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(unique(airports$faa)) # Unique turns out to be redundant because faa is a primary key\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1458\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(unique(flights$dest))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 105\n```\n\n\n:::\n:::\n\n\nThere are much more airports then destinations in flights!  \n... but the rows of airports prevail when it is the first in a left_join.  \nSo, the dataframe should even *increase* because we get several rows of airports without flights.  \nLet us dig deeper.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetdiff( unique(airports$faa), unique(flights$dest)) |> length()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1357\n```\n\n\n:::\n\n```{.r .cell-code}\nsetdiff( unique(flights$dest), unique(airports$faa)) |> length()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n1,357 airports have no flights!   \nThere are four destinations in flights, which are not in the airports list!\n\nHow many flights are to these?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  filter(dest %in% setdiff( unique(flights$dest), unique(airports$faa))) |> \n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7602\n```\n\n\n:::\n:::\n\n\n7,602 flights go to destinations not listed as airport\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(airports |> left_join(flights, by = c(\"faa\" = \"dest\"))) == nrow(flights) + 1357 - 7602\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\nOK, now we have a clear picture: \n\n`airport` with left_joined `flights` duplicates the rows of `airports` for each flight flying to it. So the total number of rows is\n\n- the number of flights \n- plus the number of airport which do not appear as a destination\n- minus the flights which go to destinations which are not listed in airports\n\n\n**Learning:** The new number of observation after a join can be a complex combination of duplication and dropping.   \nIt is your responsibility to understand what is happening!\n\n\n\n\n\n\n\n\n# Math: Sets and vectors\n\n## Definition: Sets and vectors {background-color=\"aquamarine\"}\n\nA **set** is mathematical model for the *unordered* collection of *different* things (**elements**).\n\nExamples\n\n- $\\{3, \\text{Hi}, 😀, 🖖 \\}$\n- $\\{1,3,5\\}$\n- The natural numbers $\\mathbb{N} = \\{1, 2, 3, \\dots\\}$ (infinite!)\n- $\\{\\mathtt{\"EWR\"}, \\mathtt{\"LGA\"}, \\mathtt{\"JFK\"}\\}$   \nthese are `origin` airports in `flights`\n\n\n## Math: Sets and vectors {background-color=\"aquamarine\"}\n\nA **vector** is an ordered collection of things (**components**) of the same type. \n\nIn a set, each thing can only be once and the order does not matter!\n\n$\\{1,3,5\\} = \\{3,5,1\\} = \\{1,1,1,3,5,5\\}$\n\nFor vectors:\n\n$[1\\ 3\\ 5] \\neq [3\\ 5\\ 1]$ because we compare component-wise, so we cannot even compare with those with the vector $[1\\ 1\\ 1\\ 3\\ 5\\ 5]$\n\n## Math: Set operations  {background-color=\"aquamarine\"}\n\nSets $A = \\{🐺, 🦊, 🐶\\}$ and $B = \\{🐶, 🐷, 🐹\\}$, $C = \\{🐶, 🐷\\}$:\n\n::: {.incremental}\n- Set **union** $A \\cup B$ = \\{🐺, 🦊, 🐶, 🐷, 🐹\\}    \n  $x \\in A \\cup B$ when $x \\in A$ `|` (or) $x\\in B$\n- Set **intersection** $A \\cap B$ = \\{🐶\\}    \n  $x \\in A \\cap B$ when $x \\in A$ `&` (and) $x\\in B$\n- Set **difference** $A \\setminus B = \\{🐺, 🦊\\}$, $B \\setminus A$ = \\{🐷, 🐹\\}\n- **Subset**: $C \\subset B$ but $C \\not\\subset A$\n:::\n\n. . . \n\nSee the analogy of set operations and logical operations. \n\n## Set operations in R {.smaller}\n\n`unique` shows the set of elements in a vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(flights$origin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"EWR\" \"LGA\" \"JFK\"\n```\n\n\n:::\n:::\n\n\n. . . \n\n`setequal` tests for set equality\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetequal(c(\"EWR\",\"LGA\",\"JFK\"), c(\"EWR\",\"EWR\",\"LGA\",\"JFK\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n. . . \n\n`union`, `intersect`, `setdiff` treat vectors as sets and operate as expected\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunion(1:5,3:7)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5 6 7\n```\n\n\n:::\n\n```{.r .cell-code}\nintersect(1:5,3:7)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 4 5\n```\n\n\n:::\n\n```{.r .cell-code}\nsetdiff(1:5,3:7)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2\n```\n\n\n:::\n:::\n\n\n## Sets: Take-away\n\n- Set operations are not a daily business in data science\n- However, they are useful for data exploration!\n- Knowing set operations is key to understand **probability**:\n    - A *sample space* is the *set of all atomic events*. \n    - An *event* is a *subset of the sample* \n    - A *probability function* assigns probabilities to all events. \n\n\n# Math: Functions\n\n## Functions mathematically  {background-color=\"aquamarine\"}\n\nConsider two sets: The *domain* $X$ and the *codomain* $Y$. \n\nA *function* $f$ assigns each element of $X$ to exactly one element of $Y$.\n\n:::{.columns}\n:::{.column width=\"50%\"}\nWe write $f : X \\to  Y$  \n[\"$f$ maps from $X$ to $Y$\"]{style=\"color:blue;\"}\n\nand $x \\mapsto f(x)$   \n[\"$x$ maps to $f(x)$\"]{style=\"color:blue;\"}\n\nThe yellow set is called the *image* of $f$.\n:::\n:::{.column }\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/6/64/Codomain2.SVG/375px-Codomain2.SVG.png)\n:::\n:::\n\n:::{.aside}\nPicture from wikipedia. \n:::\n\n## Conventions in mathematical text  {.smaller background-color=\"aquamarine\"}\n\n- Sets are denoted with capital letters. \n- Their elements with (corresponding) small letters. \n- Functions are often called $f$, $g$, or $h$. \n- Other terminology can be used! \n\n. . . \n\n**Important in math**\n\n- When you read math:     \n  *Keep track of what objects are! What are functions, what are sets, what are numbers, ...*^[Watch: How to read math <https://www.youtube.com/watch?v=Kp2bYWRQylk>] \n- When you write math: *Define what objects are.*\n\n\n\n\n## Is this a mathematical function? {.smaller}\n\n![](img/function_lionfilter_input_Jan.jpeg){height=200} $\\ \\mapsto\\ $ ![](img/function_lionfilter_Jan.jpg){height=200} \n\n*Input* from $X = \\{\\text{A picture where a face can be recognized}\\}$. \n\n*Function:* Upload input at <https://funny.pho.to/lion/> and download output.\n\n*Output* from $Y = \\{\\text{Set of pictures with a specific format.}\\}$ \n\n. . . \n\nYes, it is a function. **Important: Output is the same for the same input!**\n\n\n## Is this a mathematical function? {.smaller}\n\n*Input* a text snippet. *Function:* Enter text at <https://www.craiyon.com>. *Output* a picture.\n\n:::{.columns}\n:::{.column width=\"50%\"}\n![](img/craiyon-DataScienceConcepts.png){height=430} \n:::\n:::{.column }\nOther examples:\n\n- \"Nuclear explosion broccoli\"\n- \"The Eye of Sauron reading a newspaper\"\n- \"The legendary attack of Hamster Godzilla wearing a tiny Sombrero\"\n\n![](img/Nuclear exposion broccoli.png){height=150}\n![](img/The Eye of Sauron reading a newspaper.png){height=150} \n![](img/The legendary attack of Hamster Godzilla wearing a tiny Sombrero.png){height=150} \n:::\n:::\n\n. . .\n\nNo, it is not a function. It has nine outcomes and these change when run again. \n\n# Functions: Graphs, Shift and Scale, Polynomial vs. Exponential\n\n## Graphs of functions   {.smaller background-color=\"aquamarine\"}\n\n- A function is characterized by the set all possible pairs $(x,f(x))$. \n- This is called its *graph*. \n- When domain and codomain are real numbers then the graph can be shown in a *Cartesian coordinate system*. Example $f(x) = x^3 - x^2$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nggplot() + geom_function(fun = function(x) x^3 - x^2) + xlim(c(-0.5,1.5)) + xlab(\"x\") + theme_minimal(base_size = 20)\n```\n\n::: {.cell-output-display}\n![](W04_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n\n<!-- ## Higher dimensional input and output -->\n\n<!-- Function can take $m$-dimensional input vectors and $n$-dimensional output vectors $f : \\mathbb{R}^m \\to \\mathbb{R}^n$.  -->\n\n\n## Some functions $f: \\mathbb{R} \\to \\mathbb{R}$ {.smaller background-color=\"aquamarine\"}\n\n:::{.columns}\n:::{.column width=\"50%\"}\n$f(x) = x$ *identity function*   \n[$f(x) = x^2$ *square function*]{style=\"color:orange;\"}  \n[$f(x) = \\sqrt{x}$ *square root function*]{style=\"color:blue;\"}   \n[$f(x) = e^x$ *exponential function*]{style=\"color:red;\"}   \n[$f(x) = \\log(x)$ *natural logarithm*]{style=\"color:green;\"}\n\n- Square and square root function are *inverse* of each other. Exponential and natural logarithm, too. \n\n$\\sqrt[2]{x}^2 = \\sqrt[2]{x^2} = x$, $\\log(e^x) = e^{\\log(x)} = x$\n\n- Identity function graph as mirror axis. \n:::\n:::{.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_function(fun = function(x) x) + \n  geom_function(fun = function(x) exp(x), color = \"red\") + \n  geom_function(fun = function(x) log(x), color = \"green\") + \n  geom_function(fun = function(x) x^2, color = \"orange\") + \n  geom_function(fun = function(x) sqrt(x), color = \"blue\") + \n  coord_fixed() +\n  xlim(c(-3,3))+ ylim(c(-3,3)) + xlab(\"x\") + theme_minimal(base_size = 20)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in log(x): NaNs produced\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in sqrt(x): NaNs produced\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 32 rows containing missing values or values outside the scale range\n(`geom_function()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 50 rows containing missing values or values outside the scale range\n(`geom_function()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 44 rows containing missing values or values outside the scale range\n(`geom_function()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 50 rows containing missing values or values outside the scale range\n(`geom_function()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](W04_files/figure-html/unnamed-chunk-52-1.png){width=480}\n:::\n:::\n\n:::\n:::\n\n:::{.aside}\n$e$ is *Euler's number* $2.71828\\dots$. The natural logarithm is also often called $\\ln$. The square root function is $\\mathbb{R}_{\\geq 0} \\to \\mathbb{R}$, the logarithm $\\mathbb{R}_{>0} \\to \\mathbb{R}$.   \n:::\n\n\n## Shifts and scales {.smaller background-color=\"aquamarine\" .scrollable}\n\nHow can we shift, stretch, or shrink a graph vertically and horizontally?\n\n. . . \n\n:::{.panel-tabset}\n\n### $y$-shift\n:::{.columns}\n:::{.column width=\"50%\"}\nAdd a constant to the function. \n\n$f(x) = x^3 - x^2 \\leadsto$\n\n$\\quad f(x) = x^3 - x^2 + a$\n\nFor $a =$ [-2]{style=\"color:red;\"}, [-0.5]{style=\"color:darkred;\"}, [0.5]{style=\"color:darkblue;\"}, [2]{style=\"color:blue;\"}\n::: \n:::{.column}\n\n::: {.cell}\n\n```{.r .cell-code}\na = c(1, 0.5, 2, -0.5, -2)\nggplot() + geom_function(fun = function(x) x^3 - x^2, size = 2, alpha = 0.5) +\n  geom_function(fun = function(x) x^3 - x^2 +a[2], color = \"blue4\", size = 2) +\n  geom_function(fun = function(x) x^3 - x^2 +a[3], color = \"blue\", size = 2) +\n  geom_function(fun = function(x) x^3 - x^2 +a[4], color = \"red4\") +\n  geom_function(fun = function(x) x^3 - x^2 +a[5], color = \"red\") +\n  coord_fixed() + xlim(c(-3,3)) + ylim(c(-3,3)) + xlab(\"x\") + theme_minimal(base_size = 24)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 50 rows containing missing values or values outside the scale range\n(`geom_function()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 51 rows containing missing values or values outside the scale range\n(`geom_function()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 53 rows containing missing values or values outside the scale range\n(`geom_function()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 50 rows containing missing values or values outside the scale range\n(`geom_function()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 53 rows containing missing values or values outside the scale range\n(`geom_function()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](W04_files/figure-html/unnamed-chunk-53-1.png){width=672}\n:::\n:::\n\n:::\n:::\n\n### $x$-shift\n:::{.columns}\n:::{.column width=\"50%\"}\n**Subtract** a constant from all $x$ within the function definition.\n\n$f(x) = x^3 - x^2 \\leadsto$\n\n$\\quad f(x) = (x - a)^3 - (x - a)^2$\n\nFor $a =$ [-2]{style=\"color:red;\"}, [-0.5]{style=\"color:darkred;\"}, [0.5]{style=\"color:darkblue;\"}, [2]{style=\"color:blue;\"}\n\n**Attention:**  \nShifting $a$ units to the right needs subtracting $a$!   \nYou can think of the *coordinate system being shifted* in direction $a$ while the graph stays.\n::: \n:::{.column}\n\n::: {.cell}\n\n```{.r .cell-code}\na = c(1, 0.5, 2, -0.5, -2)\nggplot() + geom_function(fun = function(x) x^3 - x^2, size = 2, alpha = 0.5) +\n  geom_function(fun = function(x) (x-a[2])^3 - (x-a[2])^2, color = \"blue4\", size = 2) +\n  geom_function(fun = function(x) (x-a[3])^3 - (x-a[3])^2, color = \"blue\", size = 2) +\n  geom_function(fun = function(x) (x-a[4])^3 - (x-a[4])^2, color = \"red4\") +\n  geom_function(fun = function(x) (x-a[5])^3 - (x-a[5])^2, color = \"red\") +\n  coord_fixed() + xlim(c(-3,3)) + ylim(c(-3,3)) + xlab(\"x\") + theme_minimal(base_size = 24)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 50 rows containing missing values or values outside the scale range\n(`geom_function()`).\nRemoved 50 rows containing missing values or values outside the scale range\n(`geom_function()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 64 rows containing missing values or values outside the scale range\n(`geom_function()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 51 rows containing missing values or values outside the scale range\n(`geom_function()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 53 rows containing missing values or values outside the scale range\n(`geom_function()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](W04_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n:::\n:::\n\n### $y$-scale\n:::{.columns}\n:::{.column width=\"50%\"}\n**Multiply** a constant to all $x$ within the function definition.\n\n$f(x) = x^3 - x^2 \\leadsto$\n\n$\\quad f(x) = a(x^3 - x^2)$\n\nFor $a =$ [-2]{style=\"color:red;\"}, [-0.5]{style=\"color:darkred;\"}, [0.5]{style=\"color:darkblue;\"}, [2]{style=\"color:blue;\"}\n\nNegative numbers flip the graph around the $x$-axis. \n::: \n:::{.column}\n\n::: {.cell}\n\n```{.r .cell-code}\na = c(1, 0.5, 2, -0.5, -2)\nggplot() + geom_function(fun = function(x) x^3 - x^2, size = 2, alpha = 0.5) +\n  geom_function(fun = function(x) a[2]*((x)^3 - (x)^2), color = \"blue4\", size = 2) +\n  geom_function(fun = function(x) a[3]*((x)^3 - (x)^2), color = \"blue\", size = 2) +\n  geom_function(fun = function(x) a[4]*((x)^3 - (x)^2), color = \"red4\") +\n  geom_function(fun = function(x) a[5]*((x)^3 - (x)^2), color = \"red\") +\n  coord_fixed() + xlim(c(-3,3)) + ylim(c(-3,3)) + xlab(\"x\") + theme_minimal(base_size = 24)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 50 rows containing missing values or values outside the scale range\n(`geom_function()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 39 rows containing missing values or values outside the scale range\n(`geom_function()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 60 rows containing missing values or values outside the scale range\n(`geom_function()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 39 rows containing missing values or values outside the scale range\n(`geom_function()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 60 rows containing missing values or values outside the scale range\n(`geom_function()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](W04_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n:::\n\n:::\n:::\n\n### $x$-scale\n:::{.columns}\n:::{.column width=\"50%\"}\n**Divide** all $x$ within the function definition by a constant.\n\n$f(x) = x^3 - x^2 \\leadsto$\n\n$\\quad f(x) = (x/a)^3 - (x/a)^2$\n\nFor $a =$ [-2]{style=\"color:red;\"}, [-0.5]{style=\"color:darkred;\"}, [0.5]{style=\"color:darkblue;\"}, [2]{style=\"color:blue;\"}\n\nNegative numbers flip the graph around the $y$-axis. \n\n**Attention:**\nStretching needs a division by $a$!   \nYou can think of the *coordinate system being stretched* multiplicatively by $a$ while the graph stays.\n::: \n:::{.column}\n\n::: {.cell}\n\n```{.r .cell-code}\na = c(1, 0.5, 2, -0.5, -2)\nggplot() + geom_function(fun = function(x) x^3 - x^2, size = 2, alpha = 0.5) +\n  geom_function(fun = function(x) (x/a[2])^3 - (x/a[2])^2, color = \"blue4\", size = 2) +\n  geom_function(fun = function(x) (x/a[3])^3 - (x/a[3])^2, color = \"blue\", size = 2) +\n  geom_function(fun = function(x) (x/a[4])^3 - (x/a[4])^2, color = \"red4\") +\n  geom_function(fun = function(x) (x/a[5])^3 - (x/a[5])^2, color = \"red\") +\n  coord_fixed() + xlim(c(-3,3)) + ylim(c(-3,3)) + xlab(\"x\") + theme_minimal(base_size = 24)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 50 rows containing missing values or values outside the scale range\n(`geom_function()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 76 rows containing missing values or values outside the scale range\n(`geom_function()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_function()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 76 rows containing missing values or values outside the scale range\n(`geom_function()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_function()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](W04_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n:::\n:::\n\n::: \n\n## Math: Polynomials and exponentials {.smaller background-color=\"aquamarine\"}\n\nA *polynomial* is a function which is composed of (many) addends of the form $ax^n$ for different values of $a$ and $n$. \n\nIn an *exponential* the $x$ appears in the exponent. \n\n$f(x) = x^3$ vs. [$f(x) = e^x$]{style=\"color:red;\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\ng1 = ggplot() + \n  geom_function(fun = function(x) x^3) +\n  geom_function(fun = function(x) exp(x)-1, color = \"red\") +\n  xlim(c(0,2)) + xlab(\"x\") + theme_minimal(base_size = 18)\ng2 = g1 + xlim(c(0,5))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nScale for x is already present.\nAdding another scale for x, which will replace the existing scale.\n```\n\n\n:::\n\n```{.r .cell-code}\ng1 + g2 + plot_annotation(title = \"Same function but different of axis limits!\")\n```\n\n::: {.cell-output-display}\n![](W04_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n:::\n\n\n**For $x\\to\\infty$, any exponential will finally \"overtake\" any polynomial.**\n\n\n\n# Functions in Programming $\\to$ Programming Function\n\n## Input $\\to$ output {.smaller} \n\n![](https://upload.wikimedia.org/wikipedia/commons/3/3b/Function_machine2.svg)\n\n- Metaphorically, a function is a *machine* or a *blackbox* that for each input yields an output. \n- The inputs of a function are also called **arguments**. \n\n. . . \n\nDifference to math terminolgy:   \n**The output need not be the same for the same input.**\n\n:::{.aside}\nPicture from wikipedia. \n:::\n\n\n\n## Function as objects in R {.scrollable .smaller}\n \n`function` is a class of an object in R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"function\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(ggplot2::ggplot)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"function\"\n```\n\n\n:::\n:::\n\n\nCalling the function without brackets writes its code or some information. \n\n::: {.cell}\n\n```{.r .cell-code}\nsd # This function is written in R, and we see its code\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfunction (x, na.rm = FALSE) \nsqrt(var(if (is.vector(x) || is.factor(x)) x else as.double(x), \n    na.rm = na.rm))\n<bytecode: 0x636b7f6d4430>\n<environment: namespace:stats>\n```\n\n\n:::\n\n```{.r .cell-code}\nc # This function is not written in R but is a R primitive\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfunction (...)  .Primitive(\"c\")\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot2::ggplot # This function is not written solely in R\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfunction (data = NULL, mapping = aes(), ..., environment = parent.frame()) \n{\n    UseMethod(\"ggplot\")\n}\n<bytecode: 0x636b812a63b0>\n<environment: namespace:ggplot2>\n```\n\n\n:::\n:::\n\n\n## Define your own functions! (in R) {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_one <- function(x) {\n  x + 1 \n}\n# Test it\nadd_one(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11\n```\n\n\n:::\n:::\n\n\nThe skeleton for a function definition is\n\n```R\nfunction_name <- function(input){\n  # do something with the input(s)\n  # return something as output\n}\n```\n\n- `function_name` should be a short but evocative verb. \n- The `input` can be empty or one or more `name` or `name=expression` terms as arguments.\n- The last evaluated expression is returned as output. \n- When the body or the function is only one line `{}` can be omitted. For example   \n`add_one <- function(x) x + 1`\n\n\n## Flexibility of inputs and outputs {.smaller}\n\n- Arguments can be specified by `name=expression` or just `expression` (then they are taken as the next argument)\n- Default values for arguments can be provided. Useful when an argument is a parameter. \n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nmymult <- function(x = 2, y = 3) x * (y - 1)\nmymult(3,4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n:::\n\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nmymult()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nmymult(y = 3, x = 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12\n```\n\n\n:::\n:::\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nmymult(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n:::\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nmymult(y = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n. . . \n\nFor complex output use a list\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nmymult <- function(x = 2, y = 3) \n  list(out1 = x * (y - 1), out2 = x * (y - 2))\nmymult()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$out1\n[1] 4\n\n$out2\n[1] 2\n```\n\n\n:::\n:::\n\n\n# Think and program vectorized!\n\n## Vectorized functions {.smaller}\n\nMathematical functions in programming are often \"vectorized\": \n\n- Operations on a single value are applied to each component of the vector. \n- Operations on two values are applied \"component-wise\" (for vectors of the same length)\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nlog10(c(1,10,100,1000,10000))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 1 2 3 4\n```\n\n\n:::\n:::\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nc(1,1,2) + c(3,1,0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4 2 2\n```\n\n\n:::\n:::\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\n(0:5)^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  0  1  4  9 16 25\n```\n\n\n:::\n:::\n\n\n## Recall: Vector creation functions\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\n1:10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n:::\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nseq(from=-0.5, to=1.5, by=0.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] -0.5 -0.4 -0.3 -0.2 -0.1  0.0  0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9\n[16]  1.0  1.1  1.2  1.3  1.4  1.5\n```\n\n\n:::\n:::\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nseq(from=0, to=1, length.out=10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0.0000000 0.1111111 0.2222222 0.3333333 0.4444444 0.5555556 0.6666667\n [8] 0.7777778 0.8888889 1.0000000\n```\n\n\n:::\n:::\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nrep(1:3, times=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 1 2 3 1 2 3\n```\n\n\n:::\n:::\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nrep(1:3, each=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 1 1 2 2 2 3 3 3\n```\n\n\n:::\n:::\n\n\n## Plotting and transformation {.smaller}\n\n**Vector creation and vectorized functions** are key for plotting and transformation. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunc <- function(x) x^3 - x^2    # Create a vectorized function\ndata <- tibble(x = seq(-0.5,1.5,by =0.01)) |>    # Vector creation\n\tmutate(y = func(x))        # Vectorized transformation using the function\ndata |> ggplot(aes(x,y)) + geom_line() + theme_minimal(base_size = 20)\n```\n\n::: {.cell-output-display}\n![](W04_files/figure-html/unnamed-chunk-75-1.png){width=672}\n:::\n:::\n\n\n## Conveniently `ggplot`ing functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n geom_function(fun = log) +\n geom_function(fun = function(x) 3*x - 4, color = \"red\") +\n theme_minimal(base_size = 20)\n```\n\n::: {.cell-output-display}\n![](W04_files/figure-html/unnamed-chunk-76-1.png){width=480}\n:::\n:::\n\n\n\nCode line 3 shows another important concept: **anonymous functions**. The function `function(x) 3*x - 4` is defined *on the fly* without a name.\n\n\n# Conditional Statements (`if`) and Iteration (`map`)\n\n## Conditional statements  {.smaller}\n\n- `if` executes a code block if a condition is `TRUE`\n- `else` executes a code block if the condition is `FALSE`\n\nSkeleton\n\n```R\nif (condition) {\n  # code block\n} else {\n  # code block\n}\n```\n\nExample: A piece-wise defined function\n\n:::: {.columns}\n\n::: {.column width='50%'}\n\n::: {.cell}\n\n```{.r .cell-code}\npiecewise <- function(x) {\n  if (x < 2) {\n    0.5 * x\n  } else {\n    x - 1\n  }\n}\n```\n:::\n\n:::\n\n::: {.column width='50%'}\n\n::: {.cell}\n\n```{.r .cell-code}\npiecewise(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5\n```\n\n\n:::\n\n```{.r .cell-code}\npiecewise(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n```{.r .cell-code}\npiecewise(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n:::\n\n::::\n\n. . . \n\nProblem: `piecewise` is not vectorized. `piecewise(c(1,2,3))` does not work!\n\n## Vectorized operations with `map` {.smaller}\n\n- `map` functions apply a function to each element of a vector.^[In `tidyverse` they are provided in the package `purrr`]\n- `map(.x, .f, ...)` applies the function `.f` to each element of the vector of `.x` and returns a *list*.\n- `map_dbl` returns a double *vector* (other variants exist)\n\n:::: {.columns}\n\n::: {.column width='50%'}\n\n::: {.cell}\n\n```{.r .cell-code}\nmap(c(1,2,3), piecewise) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 0.5\n\n[[2]]\n[1] 1\n\n[[3]]\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\nmap_dbl(c(1,2,3), piecewise) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5 1.0 2.0\n```\n\n\n:::\n\n```{.r .cell-code}\npiecewise_vectorized <- \n function(x) map_dbl(x, piecewise) \n```\n:::\n\n:::\n\n::: {.column width='50%'}\n\n::: {.cell}\n\n```{.r .cell-code}\npiecewise_vectorized(seq(0,3,by = 0.5))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.00 0.25 0.50 0.75 1.00 1.50 2.00\n```\n\n\n:::\n\n```{.r .cell-code}\ntibble(x = seq(0,3,by = 0.5)) |> \n  mutate(y = piecewise_vectorized(x)) |> \n  ggplot(aes(x,y)) + geom_line() + theme_minimal(base_size = 20)\n```\n\n::: {.cell-output-display}\n![](W04_files/figure-html/unnamed-chunk-80-1.png){width=672}\n:::\n:::\n\n\n:::\n\n::::\n\n## `reduce` {.smaller}\n\nInstead of a list or a vector `reduce` returns a single value.   \nTo that end it needs a function with two arguments. It applies it to the first two elements of the vector, then to the result and the third element, then the result and the fourth element, and so on.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:10 |> reduce(\\(x,y) x + y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 55\n```\n\n\n:::\n:::\n\nNote: `\\(x)` is a short way to write an **anonymous function** as `function(x)`. \n\n. . . \n\nExample: Reading multiple files\n\n:::: {.columns}\n\n::: {.column width='50%'}\nInstead of \n\n```R\na <-read_csv(\"a.csv\")\nb <-read_csv(\"b.csv\")\nc <-read_csv(\"c.csv\")\nd <-read_csv(\"d.csv\")\ne <-read_csv(\"e.csv\")\nf <-read_csv(\"f.csv\")\ng <-read_csv(\"g.csv\")\n\nbind_rows(a,b,c,d,e,f,g)\n```\n:::\n\n::: {.column width='50%'}\nWrite\n```R\nletter[1:7] |> \n map(\\(x) read_csv(paste0(x,\".csv\"))) |> \n reduce(bind_rows)\n```\n:::\n\n::::\n\n## `map` and `reduce` {.smaller}\n\n- `map` applies a function to each element of a vector (or list) and returns a list (or vector if `map_dbl` or other vaeriants are used)\n    - The output has the same `length` as the input\n- `reduce` applies a function taking two arguments and then summarizes the list by applying them two element 1 and 2 and then again the result with element 3 and then the result with element 4, ...\n    - The output is one object\n    \n- Remark: The problem of vectorizing a function which has an `if` and `else` statement (see the example `piecewise_vectorized`) can also be solved using the vectorized version of it:    \n`if_else(condition = *condition*, true = *value-if_TRUE*, false = *value-if_FALSE*)`    \nHere every argument can be a vector!\n\n\n## Function programming: Take away\n\n- Functions are the most important building blocks of programming.\n- Functions can and often should be vectorized.\n- Vectorized functions are the basis for plotting and transformation.\n- `map` functions are powerful tools for iterative tasks!    \n    *Expect to not get the idea first but to love them later.*",
    "supporting": [
      "W04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}