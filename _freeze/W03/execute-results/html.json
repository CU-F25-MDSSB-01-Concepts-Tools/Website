{
  "hash": "df8bc4a9820beb22677399c6e4447c4e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"W#03 Data Import, Data Wrangling\"\nsubtitle: \"With material adopted from [Data Science in a Box](https://datasciencebox.org) and [R4DS](https://r4ds.hadley.nz)\"\nauthor: Jan Lorenz\nformat: \n  revealjs: \n    toc: true\n    toc-depth: 1\n    slide-number: true\n    chalkboard: \n      buttons: true\n    preview-links: true\n    logo: img/ConstructorUniversity.png\n    footer: \"MDSSB-DSCO-02: Data Science Concepts\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n# Data Import, First Look\n\n![](img/data-science-explore.png){height=250}\n\n\n## `readr` and `readxl` {.smaller}\n\n::: columns\n::: {.column width=\"60%\"}\n`readr` is loaded with `tidyverse`\n\n![](img/readr.png){height=150}\n\n- `read_csv()` - comma delimited files\n- `read_csv2()` - semicolon delimited files (common where \",\" is used as decimal place)\n- `read_tsv()` - tab delimited files\n- `read_delim()` - reads in files with any delimiter\n- ...\n\n:::\n\n::: {.column width=\"30%\"}\n`readxl` has to be installed and loaded separately\n\n![](img/readxl.png){height=150}\n\n- `read_excel()` read xls or xlsx files from MS Excel\n- ...\n:::\n:::\n\n\n::: aside\nThere are also packages to write data from R to excel files (`writexl`, `openxlsx`, `xlsx`, ...).\n:::\n\n## Importing data from other sources {.smaller}\n\n**R packages** for some cases. They provide function to read from the source into dataframes. \n\n- Data collected in a [**Google Spreadsheet**]{style='color:darkred;'}:  `googlesheets4` \n- Data in native formats of [**SPSS**, **Stata**, or **SAS**]{style='color:darkred;'}: `haven` \n- Data in [**SQL Databases**]{style='color:darkred;'}: `DBI`, together with a database specific backend (`RMySQL`, `RSQLite`, `RPostgreSQL`)\n- Data in [**JSON**]{style='color:darkred;'} or [**XML**]{style='color:darkred;'} format as often used by web applications (e.g. written in JavaScript): `jsonlite` and `xml2`\n- [**Scraping**]{style='color:darkred;'} data directly from websites: `rvest`\n- Using [Appache Arrow](https://arrow.apache.org/), e.g. `.parquet` files: `arrow`\n\n::: aside\nAnalog libraries will exist for python\n:::\n\n\n\n## Comma-separated values (CSV) {.smaller}\n\nCSV files are delimited text file\n\n- Can be viewed with any text editor\n- Show each row of the dataframe in a line\n- Separates the content of columns by commas (or the delimiter character)\n- Each cell could be surrounded by quotes (when long text with commas (!) is in cells)\n- The first line is interpreted as listing the variable names by default\n\n`readr` tries to guess the data type of variables\n\nYou can also customize it yourself! \n\n\nWe use CSV file when there is no certain reason to do otherwise.\nReasons are: CSV is not provided or the dataset being very larger and hard-disk storage is an issue. Other formats or more space efficient.\n\n\n\n## Data import workflow {.smaller}\n\n1. You download your CSV file to the `data/` directory. You may use `download.file()` for this, but make sure you do not download large amounts of data each time you render your file! \n2. Read the data with `data <- read_csv(\"data/FILENAME.csv\")` and read the report in the console.\n3. Explore if you are happy and iterate by customizing the data import line using specifications until the data is as you want it to be. \n\nGood practices to document the data download:\n\n- One or low number of files: Put the download line(s) in you main document, but comment out `#` after usage.\n- Write a script (**data-download.r**) to document the download commands.\n- Make your code check first if the file already exist, like this `if (!(file.exists(\"DATA_FILE.csv\"))) {DOWNLOAD-CODE}`\n\n\n## 1. Download, 2. Read {.smaller}\n\nThis downloads data only if the file does not exist. Then it loads it. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nif (!file.exists(\"data/hotels.csv\")) {\n  download.file(url = \"https://raw.githubusercontent.com/rstudio-education/datascience-box/main/course-materials/_slides/u2-d06-grammar-wrangle/data/hotels.csv\", \n                destfile = \"data/hotels.csv\")\n}\nhotels <- read_csv(\"data/hotels.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 119390 Columns: 32\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (13): hotel, arrival_date_month, meal, country, market_segment, distrib...\ndbl  (18): is_canceled, lead_time, arrival_date_year, arrival_date_week_numb...\ndate  (1): reservation_status_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nOutput is a summary how `read_csv` guessed the data types of columns. \n\n\n## 3. Explore using `spec()` {.smaller}\n\nAll details to check or customize: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nspec(hotels)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncols(\n  hotel = col_character(),\n  is_canceled = col_double(),\n  lead_time = col_double(),\n  arrival_date_year = col_double(),\n  arrival_date_month = col_character(),\n  arrival_date_week_number = col_double(),\n  arrival_date_day_of_month = col_double(),\n  stays_in_weekend_nights = col_double(),\n  stays_in_week_nights = col_double(),\n  adults = col_double(),\n  children = col_double(),\n  babies = col_double(),\n  meal = col_character(),\n  country = col_character(),\n  market_segment = col_character(),\n  distribution_channel = col_character(),\n  is_repeated_guest = col_double(),\n  previous_cancellations = col_double(),\n  previous_bookings_not_canceled = col_double(),\n  reserved_room_type = col_character(),\n  assigned_room_type = col_character(),\n  booking_changes = col_double(),\n  deposit_type = col_character(),\n  agent = col_character(),\n  company = col_character(),\n  days_in_waiting_list = col_double(),\n  customer_type = col_character(),\n  adr = col_double(),\n  required_car_parking_spaces = col_double(),\n  total_of_special_requests = col_double(),\n  reservation_status = col_character(),\n  reservation_status_date = col_date(format = \"\")\n)\n```\n\n\n:::\n:::\n\n\n## Finalize data import, option 1 {.smaller}\n\nWhen \n\n- all columns are how they should\n- you consider it not necessary to document the specifications\n\nThen use `show_col_types = FALSE` to quiet the reading message. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotels <- read_csv(\"data/hotels.csv\", show_col_types = FALSE)\n```\n:::\n\n\n\n## Finalize data import, option 2 {.smaller}\n \n- Copy the `spec(hotels)` output into the `col_types` argument\n- If necessary, customize it\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotels <- read_csv(\"data/hotels.csv\", col_types = cols(\n  hotel = col_character(),\n  is_canceled = col_logical(),\n  lead_time = col_integer(),\n  arrival_date_year = col_integer(),\n  arrival_date_month = col_character(),\n  arrival_date_week_number = col_integer(),\n  arrival_date_day_of_month = col_integer(),\n  stays_in_weekend_nights = col_integer(),\n  stays_in_week_nights = col_integer(),\n  adults = col_integer(),\n  children = col_integer(),\n  babies = col_integer(),\n  meal = col_character(),\n  country = col_character(),\n  market_segment = col_character(),\n  distribution_channel = col_character(),\n  is_repeated_guest = col_logical(),\n  previous_cancellations = col_integer(),\n  previous_bookings_not_canceled = col_integer(),\n  reserved_room_type = col_character(),\n  assigned_room_type = col_character(),\n  booking_changes = col_integer(),\n  deposit_type = col_character(),\n  agent = col_integer(),\n  company = col_integer(),\n  days_in_waiting_list = col_integer(),\n  customer_type = col_character(),\n  adr = col_double(),\n  required_car_parking_spaces = col_integer(),\n  total_of_special_requests = col_integer(),\n  reservation_status = col_character(),\n  reservation_status_date = col_date(format = \"\")\n))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n\n\n:::\n:::\n\n\n\n## Columns types {.smaller}\n\n**type function**  | **data type**\n------------------ | -------------\n`col_character()`  | character\n`col_date()`       | date\n`col_datetime()`   | POSIXct (date-time)\n`col_double()`     | double (numeric)\n`col_factor()`     | factor\n`col_guess()`      | let readr guess (default)\n`col_integer()`    | integer\n`col_logical()`    | logical\n`col_number()`     | numbers mixed with non-number characters\n`col_skip()`       | do not read\n`col_time()`       | time\n\n\n\n## Hotels data\n\n-   Data from two hotels: one resort and one city hotel\n-   Observations: Each row represents a hotel booking\n\n## First look on data\n\nType the name of the dataframe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotels\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 119,390 × 32\n   hotel        is_canceled lead_time arrival_date_year arrival_date_month\n   <chr>        <lgl>           <int>             <int> <chr>             \n 1 Resort Hotel FALSE             342              2015 July              \n 2 Resort Hotel FALSE             737              2015 July              \n 3 Resort Hotel FALSE               7              2015 July              \n 4 Resort Hotel FALSE              13              2015 July              \n 5 Resort Hotel FALSE              14              2015 July              \n 6 Resort Hotel FALSE              14              2015 July              \n 7 Resort Hotel FALSE               0              2015 July              \n 8 Resort Hotel FALSE               9              2015 July              \n 9 Resort Hotel TRUE               85              2015 July              \n10 Resort Hotel TRUE               75              2015 July              \n# ℹ 119,380 more rows\n# ℹ 27 more variables: arrival_date_week_number <int>,\n#   arrival_date_day_of_month <int>, stays_in_weekend_nights <int>,\n#   stays_in_week_nights <int>, adults <int>, children <int>, babies <int>,\n#   meal <chr>, country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <lgl>,\n#   previous_cancellations <int>, previous_bookings_not_canceled <int>, …\n```\n\n\n:::\n:::\n\n\n## Look on variable names\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(hotels)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"hotel\"                          \"is_canceled\"                   \n [3] \"lead_time\"                      \"arrival_date_year\"             \n [5] \"arrival_date_month\"             \"arrival_date_week_number\"      \n [7] \"arrival_date_day_of_month\"      \"stays_in_weekend_nights\"       \n [9] \"stays_in_week_nights\"           \"adults\"                        \n[11] \"children\"                       \"babies\"                        \n[13] \"meal\"                           \"country\"                       \n[15] \"market_segment\"                 \"distribution_channel\"          \n[17] \"is_repeated_guest\"              \"previous_cancellations\"        \n[19] \"previous_bookings_not_canceled\" \"reserved_room_type\"            \n[21] \"assigned_room_type\"             \"booking_changes\"               \n[23] \"deposit_type\"                   \"agent\"                         \n[25] \"company\"                        \"days_in_waiting_list\"          \n[27] \"customer_type\"                  \"adr\"                           \n[29] \"required_car_parking_spaces\"    \"total_of_special_requests\"     \n[31] \"reservation_status\"             \"reservation_status_date\"       \n```\n\n\n:::\n:::\n\n\n\n## Second look with `glimpse` {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(hotels)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 119,390\nColumns: 32\n$ hotel                          <chr> \"Resort Hotel\", \"Resort Hotel\", \"Resort…\n$ is_canceled                    <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALS…\n$ lead_time                      <int> 342, 737, 7, 13, 14, 14, 0, 9, 85, 75, …\n$ arrival_date_year              <int> 2015, 2015, 2015, 2015, 2015, 2015, 201…\n$ arrival_date_month             <chr> \"July\", \"July\", \"July\", \"July\", \"July\",…\n$ arrival_date_week_number       <int> 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,…\n$ arrival_date_day_of_month      <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ stays_in_weekend_nights        <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ stays_in_week_nights           <int> 0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 4, …\n$ adults                         <int> 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, …\n$ children                       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ babies                         <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ meal                           <chr> \"BB\", \"BB\", \"BB\", \"BB\", \"BB\", \"BB\", \"BB…\n$ country                        <chr> \"PRT\", \"PRT\", \"GBR\", \"GBR\", \"GBR\", \"GBR…\n$ market_segment                 <chr> \"Direct\", \"Direct\", \"Direct\", \"Corporat…\n$ distribution_channel           <chr> \"Direct\", \"Direct\", \"Direct\", \"Corporat…\n$ is_repeated_guest              <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALS…\n$ previous_cancellations         <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ previous_bookings_not_canceled <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ reserved_room_type             <chr> \"C\", \"C\", \"A\", \"A\", \"A\", \"A\", \"C\", \"C\",…\n$ assigned_room_type             <chr> \"C\", \"C\", \"C\", \"A\", \"A\", \"A\", \"C\", \"C\",…\n$ booking_changes                <int> 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ deposit_type                   <chr> \"No Deposit\", \"No Deposit\", \"No Deposit…\n$ agent                          <int> NA, NA, NA, 304, 240, 240, NA, 303, 240…\n$ company                        <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ days_in_waiting_list           <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ customer_type                  <chr> \"Transient\", \"Transient\", \"Transient\", …\n$ adr                            <dbl> 0.00, 0.00, 75.00, 75.00, 98.00, 98.00,…\n$ required_car_parking_spaces    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ total_of_special_requests      <int> 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 3, …\n$ reservation_status             <chr> \"Check-Out\", \"Check-Out\", \"Check-Out\", …\n$ reservation_status_date        <date> 2015-07-01, 2015-07-01, 2015-07-02, 20…\n```\n\n\n:::\n:::\n\n\nNow, comes the data wrangling, transformation, ...\n\n# Data Wrangling\n\nWrangling = Import + Tidy + Transform (first iteration) \n\n![](img/data-science-explore.png){height=250}\n\n\n## Grammar of Data Wrangling {.smaller}\n\n:::{.columns{}\n:::{.column width=\"30%\"}\n![](img/dplyr.png) \n:::\n:::{.column width=\"69%\"}\nGrammar of data wrangling: Start with a dataset and *pipe* it through several manipulations with `|>`\n```R\nmpg |> \n  filter(cyl == 8) |> \n  select(manufacturer, hwy) |> \n  group_by(manufacturer) |> \n  summarize(mean_hwy = mean(hwy))\n```\n:::\n:::\n\nSimilar in `python`:  Make a chain using `.` to apply `pandas` methods for dataframes one after the other.\n\n\nSimilar in `ggplot2`: Creating a ggplot object, then add graphical layers (`geom_` functions) with `+` (instead of a pipe)\n\n```R\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = trans)) + \n  geom_point() + \n  geom_smooth()\n``` \n\n## What is the pipe `|>`? {.smaller}\n\n`x |> f(a,b)` is the same as `f(x,a,b)`\n\n**The outcome of a command is put into the first argument of the next function call.**\nPractice it it see that it is exactly identical!\n\nReasons for using pipes:\n\n- structure the sequence of your data operations from left to right\n- avoid nested function calls:  \nnested: `filter(select(hotels, hotel, adults), adults == 2)`   \npiped: **`hotels |> select(hotel, adults) |> filter(adults == 2)`**  \n(base R: `hotels[hotels$adults == 2, c(\"hotel\", \"adults\")]`)\n- You'll minimize the need for local variables and function definitions\n- You'll make it easy to add steps anywhere in the sequence of operations\n\n::: aside\nSince R 4.1.0, the pipe is part of base R. Before you had to load the `magrittr` package and use `%>%`. \nYou still find it in a lot of code out in the wild. It is almost the same. \n:::\n\n\n## `dplyr` uses verbs to manipulate {.smaller}\n\n- `select`: pick columns by name\n- `arrange`: reorder rows\n- `slice`: pick rows using index(es)\n- `filter`: pick rows matching criteria\n- `distinct`: filter for unique rows\n- `mutate`: add new variables\n- `summarise`: reduce variables to values\n- `group_by`: for grouped operations\n- ... (many more)\n\n# Data Subsetting\n\n## `select` a single column {.smaller}\n\n:::: {.columns}\n\n::: {.column width='60%'}\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nhotels |> select(lead_time)     \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 119,390 × 1\n   lead_time\n       <int>\n 1       342\n 2       737\n 3         7\n 4        13\n 5        14\n 6        14\n 7         0\n 8         9\n 9        85\n10        75\n# ℹ 119,380 more rows\n```\n\n\n:::\n:::\n\n\nNote: `select(hotels, lead_time)` is identical. \n\n:::\n\n::: {.column width='40%'  .fragment}\nWhy does piping `|>` work? \n\nEvery `dplyr` function\n\n   - takes a dataframe (tibble) as first argument\n   - outputs a (manipulated) dataframe (tibble)\n\n:::\n\n::::\n\n::: aside\nIn hotel business, lead time is the time betweeen booking and arrival.\n:::\n\n## Select more columns\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nhotels |> select(hotel, lead_time)     \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 119,390 × 2\n   hotel        lead_time\n   <chr>            <int>\n 1 Resort Hotel       342\n 2 Resort Hotel       737\n 3 Resort Hotel         7\n 4 Resort Hotel        13\n 5 Resort Hotel        14\n 6 Resort Hotel        14\n 7 Resort Hotel         0\n 8 Resort Hotel         9\n 9 Resort Hotel        85\n10 Resort Hotel        75\n# ℹ 119,380 more rows\n```\n\n\n:::\n:::\n\n  \nNote that `hotel` is a variable, but `hotels` the dataframe object name\n\n\n## Select helper `starts_with`  {.smaller}\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nhotels |> select(starts_with(\"arrival\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 119,390 × 4\n   arrival_date_year arrival_date_month arrival_date_week_number\n               <int> <chr>                                 <int>\n 1              2015 July                                     27\n 2              2015 July                                     27\n 3              2015 July                                     27\n 4              2015 July                                     27\n 5              2015 July                                     27\n 6              2015 July                                     27\n 7              2015 July                                     27\n 8              2015 July                                     27\n 9              2015 July                                     27\n10              2015 July                                     27\n# ℹ 119,380 more rows\n# ℹ 1 more variable: arrival_date_day_of_month <int>\n```\n\n\n:::\n:::\n\n\n## Bring columns to the front {.smaller}\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nhotels |> select(hotel, market_segment, children, everything())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 119,390 × 32\n   hotel        market_segment children is_canceled lead_time arrival_date_year\n   <chr>        <chr>             <int> <lgl>           <int>             <int>\n 1 Resort Hotel Direct                0 FALSE             342              2015\n 2 Resort Hotel Direct                0 FALSE             737              2015\n 3 Resort Hotel Direct                0 FALSE               7              2015\n 4 Resort Hotel Corporate             0 FALSE              13              2015\n 5 Resort Hotel Online TA             0 FALSE              14              2015\n 6 Resort Hotel Online TA             0 FALSE              14              2015\n 7 Resort Hotel Direct                0 FALSE               0              2015\n 8 Resort Hotel Direct                0 FALSE               9              2015\n 9 Resort Hotel Online TA             0 TRUE               85              2015\n10 Resort Hotel Offline TA/TO         0 TRUE               75              2015\n# ℹ 119,380 more rows\n# ℹ 26 more variables: arrival_date_month <chr>,\n#   arrival_date_week_number <int>, arrival_date_day_of_month <int>,\n#   stays_in_weekend_nights <int>, stays_in_week_nights <int>, adults <int>,\n#   babies <int>, meal <chr>, country <chr>, distribution_channel <chr>,\n#   is_repeated_guest <lgl>, previous_cancellations <int>,\n#   previous_bookings_not_canceled <int>, reserved_room_type <chr>, …\n```\n\n\n:::\n:::\n\n\n## More select helpers {.smaller}\n\n- `starts_with()`: Starts with a prefix\n- `ends_with()`: Ends with a suffix\n- `contains()`: Contains a literal string\n- `num_range()`: Matches a numerical range like x01, x02, x03\n- `everything()`: Matches all variables\n- `last_col()`: Select last variable, possibly with an offset\n- `matches()`: Matches a regular expression (a sequence of symbols/characters expressing a string/pattern to be searched for within text)\n\n\n## `slice` for certain rows {.smaller}\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nhotels |> slice(2:4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 32\n  hotel        is_canceled lead_time arrival_date_year arrival_date_month\n  <chr>        <lgl>           <int>             <int> <chr>             \n1 Resort Hotel FALSE             737              2015 July              \n2 Resort Hotel FALSE               7              2015 July              \n3 Resort Hotel FALSE              13              2015 July              \n# ℹ 27 more variables: arrival_date_week_number <int>,\n#   arrival_date_day_of_month <int>, stays_in_weekend_nights <int>,\n#   stays_in_week_nights <int>, adults <int>, children <int>, babies <int>,\n#   meal <chr>, country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <lgl>,\n#   previous_cancellations <int>, previous_bookings_not_canceled <int>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, …\n```\n\n\n:::\n:::\n\n\n## `filter` for rows with certain criteria {.smaller}\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nhotels |> filter(hotel == \"City Hotel\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 79,330 × 32\n   hotel      is_canceled lead_time arrival_date_year arrival_date_month\n   <chr>      <lgl>           <int>             <int> <chr>             \n 1 City Hotel FALSE               6              2015 July              \n 2 City Hotel TRUE               88              2015 July              \n 3 City Hotel TRUE               65              2015 July              \n 4 City Hotel TRUE               92              2015 July              \n 5 City Hotel TRUE              100              2015 July              \n 6 City Hotel TRUE               79              2015 July              \n 7 City Hotel FALSE               3              2015 July              \n 8 City Hotel TRUE               63              2015 July              \n 9 City Hotel TRUE               62              2015 July              \n10 City Hotel TRUE               62              2015 July              \n# ℹ 79,320 more rows\n# ℹ 27 more variables: arrival_date_week_number <int>,\n#   arrival_date_day_of_month <int>, stays_in_weekend_nights <int>,\n#   stays_in_week_nights <int>, adults <int>, children <int>, babies <int>,\n#   meal <chr>, country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <lgl>,\n#   previous_cancellations <int>, previous_bookings_not_canceled <int>, …\n```\n\n\n:::\n:::\n\n\n\n## `filter` for multiple criteria {.smaller}\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nhotels |> filter(\n  babies >= 1,\n  children >= 1\n  ) |> \n  select(hotel, adults, babies, children)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 175 × 4\n   hotel        adults babies children\n   <chr>         <int>  <int>    <int>\n 1 Resort Hotel      2      1        1\n 2 Resort Hotel      2      1        1\n 3 Resort Hotel      2      1        1\n 4 Resort Hotel      2      1        1\n 5 Resort Hotel      2      1        1\n 6 Resort Hotel      2      1        1\n 7 Resort Hotel      2      1        1\n 8 Resort Hotel      2      1        2\n 9 Resort Hotel      2      1        2\n10 Resort Hotel      1      1        2\n# ℹ 165 more rows\n```\n\n\n:::\n:::\n\n\nComma-separated conditions are interpreted as all these should be fulfilled.   \nThis is identical to the logical AND `&`.    \n`hotels |> filter(babies >= 1 & children >= 1)`  \ndelivers the same. (Spot the tiny difference!)\n\n\n## `filter` for more complex criteria {.smaller}\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nhotels |> filter(\n  babies >= 1 | children >= 1\n  ) |> \n  select(hotel, adults, babies, children)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9,332 × 4\n   hotel        adults babies children\n   <chr>         <int>  <int>    <int>\n 1 Resort Hotel      2      0        1\n 2 Resort Hotel      2      0        2\n 3 Resort Hotel      2      0        2\n 4 Resort Hotel      2      0        2\n 5 Resort Hotel      2      0        1\n 6 Resort Hotel      2      0        1\n 7 Resort Hotel      1      0        2\n 8 Resort Hotel      2      0        2\n 9 Resort Hotel      2      1        0\n10 Resort Hotel      2      1        0\n# ℹ 9,322 more rows\n```\n\n\n:::\n:::\n\n\n`|` is the logical OR. Only one criterion needs to be fulfilled. \n\n\n## Logical operators^[Logical is sometimes called **Boolean**] {.smaller .scrollable}\n\n\n:::: {.columns}\n\n::: {.column width='50%'}\noperator      | definition                   \n--------------|------------------------------\n`<`           | less than                    \n`<=`          |\tless than or equal to        \n`>`           | greater than                 \n`>=`          |\tgreater than or equal to     \n`==`          |\texactly equal to             \n`!=`          |\tnot equal to                 \n`x & y`       | `x` AND `y`                  \n`x | y`       | `x` OR `y` \n`!x`          | not `x`\n:::\n\n::: {.column width='50%'}\nTest these (vectors of) logical statements\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nc(2 == 2   ,   2 == 3) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE\n```\n\n\n:::\n:::\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nc(2 != 2   ,    2 != 3) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE  TRUE\n```\n\n\n:::\n:::\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nc(2 != 2 & 2 != 3   ,   2 != 2 | 2 != 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE  TRUE\n```\n\n\n:::\n:::\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nc(2 == 2   ,   !(2 == 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE\n```\n\n\n:::\n:::\n\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nc(2 != 2   ,    !(2 != 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE  TRUE\n```\n\n\n:::\n:::\n\n\n:::\n\n::::\n\n# Numerical and Logical Indexing\n\n## The Concept of Indexing {.smaller}\n\nSelect and filter can also be achieved by **numerical indexing**.  \n\n**In (base) R as well as in python.**\n\nSelect ranges of rows and columns\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nhotels[1:3,5:7]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  arrival_date_month arrival_date_week_number arrival_date_day_of_month\n  <chr>                                 <int>                     <int>\n1 July                                     27                         1\n2 July                                     27                         1\n3 July                                     27                         1\n```\n\n\n:::\n:::\n\n\nYou can use any vector (with non-overshooting indexes)\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nhotels[c(1:3,100232),c(5:7,1)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n  arrival_date_month arrival_date_week_number arrival_date_day_of_month hotel   \n  <chr>                                 <int>                     <int> <chr>   \n1 July                                     27                         1 Resort …\n2 July                                     27                         1 Resort …\n3 July                                     27                         1 Resort …\n4 October                                  44                        23 City Ho…\n```\n\n\n:::\n:::\n\n\n## python is 0-indexed, R is 1-indexed! {.smaller}\n\n**python:** indexes go from 0 to n-1\n\n**R:** indexes go from 1 to n\n\n[**Be aware!**]{style='color:red;'}\n\n**Note:** There is no correct way. For some use cases one is more *natural* for others the other. \n\n**Analogy:** In mathematics there is an unsettled debate if $0 \\in \\mathbb{N}$ or $0 \\notin \\mathbb{N}$\n\n\n## Logical Indexing {.smaller}\n\nInstead of numerical indexing (with a vector of numbers) you can also use **logical indexing** with a vector of logicals. \n\nWith logical vectors you can select rows and columns. \n\nWe create a small sample data frame\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\ndata <- tibble(x = LETTERS[1:5], y = letters[6:10])\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  x     y    \n  <chr> <chr>\n1 A     f    \n2 B     g    \n3 C     h    \n4 D     i    \n5 E     j    \n```\n\n\n:::\n:::\n\n\n. . . \n\nNow, we select some rows and a column with logical index vectors\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\ndata[c(TRUE,FALSE,TRUE,FALSE,TRUE),c(TRUE,FALSE)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 1\n  x    \n  <chr>\n1 A    \n2 C    \n3 E    \n```\n\n\n:::\n:::\n\n\n\n## Logical vectors from conditional statements {.smaller}\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\ndata$x\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"A\" \"B\" \"C\" \"D\" \"E\"\n```\n\n\n:::\n:::\n\n. . .\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\ndata$x %in% c(\"C\",\"E\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE  TRUE FALSE  TRUE\n```\n\n\n:::\n:::\n\n. . .\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\ndata[data$x %in% c(\"C\",\"E\"),]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  x     y    \n  <chr> <chr>\n1 C     h    \n2 E     j    \n```\n\n\n:::\n:::\n\n. . .\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\ndata[data$x %in% c(\"C\",\"E\") | \n       data$y %in% c(\"h\",\"i\"),]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  x     y    \n  <chr> <chr>\n1 C     h    \n2 D     i    \n3 E     j    \n```\n\n\n:::\n:::\n\n. . .\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\ndata |> \n  filter(\n    x %in% c(\"C\",\"E\") | y %in% c(\"h\",\"i\")\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  x     y    \n  <chr> <chr>\n1 C     h    \n2 D     i    \n3 E     j    \n```\n\n\n:::\n:::\n\n\n# Counting and Sorting\n\n## Unique combinations, arranging\n \n`distinct` and `arrange` (for sorting)\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nhotels |> \n  distinct(hotel, market_segment) |> \n  arrange(hotel, market_segment)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14 × 2\n   hotel        market_segment\n   <chr>        <chr>         \n 1 City Hotel   Aviation      \n 2 City Hotel   Complementary \n 3 City Hotel   Corporate     \n 4 City Hotel   Direct        \n 5 City Hotel   Groups        \n 6 City Hotel   Offline TA/TO \n 7 City Hotel   Online TA     \n 8 City Hotel   Undefined     \n 9 Resort Hotel Complementary \n10 Resort Hotel Corporate     \n11 Resort Hotel Direct        \n12 Resort Hotel Groups        \n13 Resort Hotel Offline TA/TO \n14 Resort Hotel Online TA     \n```\n\n\n:::\n:::\n\n. . .\n\n## Counting \n\n`count`\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nhotels |> \n  count(hotel, market_segment) |>      # This produces a new variable n\n  arrange(n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14 × 3\n   hotel        market_segment     n\n   <chr>        <chr>          <int>\n 1 City Hotel   Undefined          2\n 2 Resort Hotel Complementary    201\n 3 City Hotel   Aviation         237\n 4 City Hotel   Complementary    542\n 5 Resort Hotel Corporate       2309\n 6 City Hotel   Corporate       2986\n 7 Resort Hotel Groups          5836\n 8 City Hotel   Direct          6093\n 9 Resort Hotel Direct          6513\n10 Resort Hotel Offline TA/TO   7472\n11 City Hotel   Groups         13975\n12 City Hotel   Offline TA/TO  16747\n13 Resort Hotel Online TA      17729\n14 City Hotel   Online TA      38748\n```\n\n\n:::\n:::\n\n\n## Counting, arrange descending\n\n`count`, `arrange`, `desc` \n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nhotels |> \n  count(hotel, market_segment) |>      # This produces a new variable n\n  arrange(desc(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 14 × 3\n   hotel        market_segment     n\n   <chr>        <chr>          <int>\n 1 City Hotel   Online TA      38748\n 2 Resort Hotel Online TA      17729\n 3 City Hotel   Offline TA/TO  16747\n 4 City Hotel   Groups         13975\n 5 Resort Hotel Offline TA/TO   7472\n 6 Resort Hotel Direct          6513\n 7 City Hotel   Direct          6093\n 8 Resort Hotel Groups          5836\n 9 City Hotel   Corporate       2986\n10 Resort Hotel Corporate       2309\n11 City Hotel   Complementary    542\n12 City Hotel   Aviation         237\n13 Resort Hotel Complementary    201\n14 City Hotel   Undefined          2\n```\n\n\n:::\n:::\n\n\n\n# Data Transformation\n\n\n## Create a new variable with `mutate`\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nhotels |>\n  mutate(little_ones = children + babies) |>\n  select(children, babies, little_ones) |>\n  arrange(desc(little_ones)) # This sorts in descending order. See the big things!\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 119,390 × 3\n   children babies little_ones\n      <int>  <int>       <int>\n 1       10      0          10\n 2        0     10          10\n 3        0      9           9\n 4        2      1           3\n 5        2      1           3\n 6        2      1           3\n 7        3      0           3\n 8        2      1           3\n 9        2      1           3\n10        3      0           3\n# ℹ 119,380 more rows\n```\n\n\n:::\n:::\n\n\n## More mutating\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nhotels |>\n  mutate(little_ones = children + babies) |>\n  count(hotel, little_ones) |>\n  mutate(prop = n / sum(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 4\n   hotel        little_ones     n       prop\n   <chr>              <int> <int>      <dbl>\n 1 City Hotel             0 73923 0.619     \n 2 City Hotel             1  3263 0.0273    \n 3 City Hotel             2  2056 0.0172    \n 4 City Hotel             3    82 0.000687  \n 5 City Hotel             9     1 0.00000838\n 6 City Hotel            10     1 0.00000838\n 7 City Hotel            NA     4 0.0000335 \n 8 Resort Hotel           0 36131 0.303     \n 9 Resort Hotel           1  2183 0.0183    \n10 Resort Hotel           2  1716 0.0144    \n11 Resort Hotel           3    29 0.000243  \n12 Resort Hotel          10     1 0.00000838\n```\n\n\n:::\n:::\n\n\n## Summarizing\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nhotels |>\n  summarize(mean_adr = mean(adr))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  mean_adr\n     <dbl>\n1     102.\n```\n\n\n:::\n:::\n\n\n- That shrinks the dataframe to one row!\n- Don't forget to name the new variable (here `mean_adr`)\n- You can use any function you can apply to a vector!  \n  (Sometimes you may need to write your own one.)\n\n:::{.aside}\nIn hoteling, ADR is the average daily rate, the average daily rental income per paid occupied room. A performce indicator.\n:::\n\n\n## Grouped operations {.smaller}\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nhotels |>\n  group_by(hotel) |>\n  summarise(mean_adr = mean(adr))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  hotel        mean_adr\n  <chr>           <dbl>\n1 City Hotel      105. \n2 Resort Hotel     95.0\n```\n\n\n:::\n:::\n\n\nLook at the grouping attributes:\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nhotels |>\n  group_by(hotel)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 119,390 × 32\n# Groups:   hotel [2]\n   hotel        is_canceled lead_time arrival_date_year arrival_date_month\n   <chr>        <lgl>           <int>             <int> <chr>             \n 1 Resort Hotel FALSE             342              2015 July              \n 2 Resort Hotel FALSE             737              2015 July              \n 3 Resort Hotel FALSE               7              2015 July              \n 4 Resort Hotel FALSE              13              2015 July              \n 5 Resort Hotel FALSE              14              2015 July              \n 6 Resort Hotel FALSE              14              2015 July              \n 7 Resort Hotel FALSE               0              2015 July              \n 8 Resort Hotel FALSE               9              2015 July              \n 9 Resort Hotel TRUE               85              2015 July              \n10 Resort Hotel TRUE               75              2015 July              \n# ℹ 119,380 more rows\n# ℹ 27 more variables: arrival_date_week_number <int>,\n#   arrival_date_day_of_month <int>, stays_in_weekend_nights <int>,\n#   stays_in_week_nights <int>, adults <int>, children <int>, babies <int>,\n#   meal <chr>, country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <lgl>,\n#   previous_cancellations <int>, previous_bookings_not_canceled <int>, …\n```\n\n\n:::\n:::\n\n\n\n## Grouping, summarizing, visualizing {.smaller}\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nhotels |>\n  group_by(hotel, arrival_date_week_number) |>\n  summarise(mean_adr = mean(adr)) |> \n  ggplot(aes(x = arrival_date_week_number, y = mean_adr, color = hotel)) +\n  geom_line()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'hotel'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](W03_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n\n## Grouping alternative {.smaller}\n\nInstead of a `group_by(...)` you can also use the `.by = ...` argument in `summarize` (or `mutate`) \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotels |>\n  summarise(mean_adr = mean(adr), .by = c(hotel, arrival_date_week_number)) |> \n  ggplot(aes(x = arrival_date_week_number, y = mean_adr, color = hotel)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](W03_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n# Where to find help\n\n## Resources {.smaller}\n\n* For systemic understanding: Learning resources linked in the syllabus\n  * R for Data Science\n  * Python Data Science Handbook\n* For quick overview to get inspiration\n  * Cheatsheets (find some in RStudio -> Help, others by google)\n    * ggplot2 Cheatsheet\n    * dplyr Cheatsheet\n* For detailed help with a function \n  * Help file of the function `?FUNCTION-NAME`, or search box in Help tab\n  * Reference page on the package webpage\n* Talk to ChatGPT? *Does it work?*\n  \n\n# More under the hood: Names vectors, Indexing\n\n## Named vectors\n\nAll types of vectors can be named upon creation\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nc(Num1 = 4, Second = 7, Last = 8)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Num1 Second   Last \n     4      7      8 \n```\n\n\n:::\n:::\n\n\n. . . \n\nor names can be set afterward.\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nx <- 1:4\ny <- set_names(x, c(\"a\",\"b\",\"c\",\"d\"))\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\na b c d \n1 2 3 4 \n```\n\n\n:::\n:::\n\n\n. . . \n\nNamed vectors can be used for subsetting.\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\ny[c(\"b\",\"d\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nb d \n2 4 \n```\n\n\n:::\n:::\n\n\n## Reminder: Indexing and vectorized thinking\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nx <- set_names(1:10,LETTERS[1:10])\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n A  B  C  D  E  F  G  H  I  J \n 1  2  3  4  5  6  7  8  9 10 \n```\n\n\n:::\n:::\n\n\n. . . \n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nx[c(4,2,1,1,1,1,4,1,5)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nD B A A A A D A E \n4 2 1 1 1 1 4 1 5 \n```\n\n\n:::\n:::\n\n. . . \n\nRemoving with negative index numbers.\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nx[c(-3,-5,-2)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n A  D  F  G  H  I  J \n 1  4  6  7  8  9 10 \n```\n\n\n:::\n:::\n\n. . . \n\nMixing  does not work.\n```R\nx[c(-3,1)]  # Will throw an error\n```\n\n## R objects can have attributes {.smaller}\n\nIn a named vector, the names are an attribute.\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n A  B  C  D  E  F  G  H  I  J \n 1  2  3  4  5  6  7  8  9 10 \n```\n\n\n:::\n\n```{.r .cell-code}\nattributes(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$names\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n```\n\n\n:::\n:::\n\n\n. . . \n\nAttributes can be assigned freely.\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nattr(x, \"SayHi\") <- \"Hi\"\nattr(x, \"SayBye\") <- \"Bye\"\nattributes(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$names\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\n$SayHi\n[1] \"Hi\"\n\n$SayBye\n[1] \"Bye\"\n```\n\n\n:::\n:::\n\n\n\n## Attributes in data structures {.scrollable}\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nlibrary(nycflights13)\nattributes(airports)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$class\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n$row.names\n   [1]    1    2    3    4    5    6    7    8    9   10   11   12   13   14\n  [15]   15   16   17   18   19   20   21   22   23   24   25   26   27   28\n  [29]   29   30   31   32   33   34   35   36   37   38   39   40   41   42\n  [43]   43   44   45   46   47   48   49   50   51   52   53   54   55   56\n  [57]   57   58   59   60   61   62   63   64   65   66   67   68   69   70\n  [71]   71   72   73   74   75   76   77   78   79   80   81   82   83   84\n  [85]   85   86   87   88   89   90   91   92   93   94   95   96   97   98\n  [99]   99  100  101  102  103  104  105  106  107  108  109  110  111  112\n [113]  113  114  115  116  117  118  119  120  121  122  123  124  125  126\n [127]  127  128  129  130  131  132  133  134  135  136  137  138  139  140\n [141]  141  142  143  144  145  146  147  148  149  150  151  152  153  154\n [155]  155  156  157  158  159  160  161  162  163  164  165  166  167  168\n [169]  169  170  171  172  173  174  175  176  177  178  179  180  181  182\n [183]  183  184  185  186  187  188  189  190  191  192  193  194  195  196\n [197]  197  198  199  200  201  202  203  204  205  206  207  208  209  210\n [211]  211  212  213  214  215  216  217  218  219  220  221  222  223  224\n [225]  225  226  227  228  229  230  231  232  233  234  235  236  237  238\n [239]  239  240  241  242  243  244  245  246  247  248  249  250  251  252\n [253]  253  254  255  256  257  258  259  260  261  262  263  264  265  266\n [267]  267  268  269  270  271  272  273  274  275  276  277  278  279  280\n [281]  281  282  283  284  285  286  287  288  289  290  291  292  293  294\n [295]  295  296  297  298  299  300  301  302  303  304  305  306  307  308\n [309]  309  310  311  312  313  314  315  316  317  318  319  320  321  322\n [323]  323  324  325  326  327  328  329  330  331  332  333  334  335  336\n [337]  337  338  339  340  341  342  343  344  345  346  347  348  349  350\n [351]  351  352  353  354  355  356  357  358  359  360  361  362  363  364\n [365]  365  366  367  368  369  370  371  372  373  374  375  376  377  378\n [379]  379  380  381  382  383  384  385  386  387  388  389  390  391  392\n [393]  393  394  395  396  397  398  399  400  401  402  403  404  405  406\n [407]  407  408  409  410  411  412  413  414  415  416  417  418  419  420\n [421]  421  422  423  424  425  426  427  428  429  430  431  432  433  434\n [435]  435  436  437  438  439  440  441  442  443  444  445  446  447  448\n [449]  449  450  451  452  453  454  455  456  457  458  459  460  461  462\n [463]  463  464  465  466  467  468  469  470  471  472  473  474  475  476\n [477]  477  478  479  480  481  482  483  484  485  486  487  488  489  490\n [491]  491  492  493  494  495  496  497  498  499  500  501  502  503  504\n [505]  505  506  507  508  509  510  511  512  513  514  515  516  517  518\n [519]  519  520  521  522  523  524  525  526  527  528  529  530  531  532\n [533]  533  534  535  536  537  538  539  540  541  542  543  544  545  546\n [547]  547  548  549  550  551  552  553  554  555  556  557  558  559  560\n [561]  561  562  563  564  565  566  567  568  569  570  571  572  573  574\n [575]  575  576  577  578  579  580  581  582  583  584  585  586  587  588\n [589]  589  590  591  592  593  594  595  596  597  598  599  600  601  602\n [603]  603  604  605  606  607  608  609  610  611  612  613  614  615  616\n [617]  617  618  619  620  621  622  623  624  625  626  627  628  629  630\n [631]  631  632  633  634  635  636  637  638  639  640  641  642  643  644\n [645]  645  646  647  648  649  650  651  652  653  654  655  656  657  658\n [659]  659  660  661  662  663  664  665  666  667  668  669  670  671  672\n [673]  673  674  675  676  677  678  679  680  681  682  683  684  685  686\n [687]  687  688  689  690  691  692  693  694  695  696  697  698  699  700\n [701]  701  702  703  704  705  706  707  708  709  710  711  712  713  714\n [715]  715  716  717  718  719  720  721  722  723  724  725  726  727  728\n [729]  729  730  731  732  733  734  735  736  737  738  739  740  741  742\n [743]  743  744  745  746  747  748  749  750  751  752  753  754  755  756\n [757]  757  758  759  760  761  762  763  764  765  766  767  768  769  770\n [771]  771  772  773  774  775  776  777  778  779  780  781  782  783  784\n [785]  785  786  787  788  789  790  791  792  793  794  795  796  797  798\n [799]  799  800  801  802  803  804  805  806  807  808  809  810  811  812\n [813]  813  814  815  816  817  818  819  820  821  822  823  824  825  826\n [827]  827  828  829  830  831  832  833  834  835  836  837  838  839  840\n [841]  841  842  843  844  845  846  847  848  849  850  851  852  853  854\n [855]  855  856  857  858  859  860  861  862  863  864  865  866  867  868\n [869]  869  870  871  872  873  874  875  876  877  878  879  880  881  882\n [883]  883  884  885  886  887  888  889  890  891  892  893  894  895  896\n [897]  897  898  899  900  901  902  903  904  905  906  907  908  909  910\n [911]  911  912  913  914  915  916  917  918  919  920  921  922  923  924\n [925]  925  926  927  928  929  930  931  932  933  934  935  936  937  938\n [939]  939  940  941  942  943  944  945  946  947  948  949  950  951  952\n [953]  953  954  955  956  957  958  959  960  961  962  963  964  965  966\n [967]  967  968  969  970  971  972  973  974  975  976  977  978  979  980\n [981]  981  982  983  984  985  986  987  988  989  990  991  992  993  994\n [995]  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008\n[1009] 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022\n[1023] 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036\n[1037] 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050\n[1051] 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064\n[1065] 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078\n[1079] 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092\n[1093] 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106\n[1107] 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120\n[1121] 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134\n[1135] 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148\n[1149] 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162\n[1163] 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176\n[1177] 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190\n[1191] 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204\n[1205] 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218\n[1219] 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232\n[1233] 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246\n[1247] 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260\n[1261] 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274\n[1275] 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288\n[1289] 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302\n[1303] 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316\n[1317] 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330\n[1331] 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344\n[1345] 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358\n[1359] 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372\n[1373] 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386\n[1387] 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400\n[1401] 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414\n[1415] 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428\n[1429] 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442\n[1443] 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456\n[1457] 1457 1458\n\n$spec\ncols(\n  id = col_double(),\n  name = col_character(),\n  city = col_character(),\n  country = col_character(),\n  faa = col_character(),\n  icao = col_character(),\n  lat = col_double(),\n  lon = col_double(),\n  alt = col_double(),\n  tz = col_double(),\n  dst = col_character(),\n  tzone = col_character()\n)\n\n$names\n[1] \"faa\"   \"name\"  \"lat\"   \"lon\"   \"alt\"   \"tz\"    \"dst\"   \"tzone\"\n```\n\n\n:::\n:::\n\n\n## Three important attributes {.smaller}\n\n- **Names** are used to name element of a vector, also works for lists and therefore also dataframes (lists of atomic vectors of the same length)\n- **Dimensions** (`dim()`) is a short numeric vector making a vector behave as a matrix or a higher dimensional array. A vector `1:6` together with `dim` being `c(2,3)` is a matrix with 2 rows and 3 columns  \n$\\begin{bmatrix} 1 & 3 & 5 \\\\ 2 & 4 & 6 \\end{bmatrix}$\n- **Class** is used to implement the S3 object oriented system. We don't need to know the details here. The class system makes it for example possible that the same function, e.g. `print()` behaves differently for objects of a different class.\n\n**Class** plays a role in specifying *augmented vectors* like factors, dates, date-times, or tibbles. \n\n# Augmented vectors: Factors and Dates\n\n## Factors {.smaller}\n\nR uses factors to handle categorical variables, variables that have a fixed and known set of possible values\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nx <- factor(c(\"BS\", \"MS\", \"PhD\", \"MS\", \"BS\", \"BS\"))\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] BS  MS  PhD MS  BS  BS \nLevels: BS MS PhD\n```\n\n\n:::\n:::\n\n\n. . .\n\nTechnically, a factor is vector of integers with a `levels` attribute which specifies the categories for the integers. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code}\nas.integer(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 2 1 1\n```\n\n\n:::\n\n```{.r .cell-code}\nattributes(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$levels\n[1] \"BS\"  \"MS\"  \"PhD\"\n\n$class\n[1] \"factor\"\n```\n\n\n:::\n:::\n\n\n. . .\n\nThe class factor makes R print the level of each element of the vector instead of the underlying integer. \n\n## Factors for data visualization {.smaller}\n\nWe manipulate factors with functions from the [`forcats`](https://forcats.tidyverse.org/) package of the tidyverse core. \n\n::: {.panel-tabset}\n\n#### Plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg |> ggplot(aes(y = manufacturer)) + geom_bar()\n```\n\n::: {.cell-output-display}\n![](W03_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\n#### Reverse\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg |> ggplot(aes(y = fct_rev(manufacturer))) + geom_bar()\n```\n\n::: {.cell-output-display}\n![](W03_files/figure-html/unnamed-chunk-53-1.png){width=672}\n:::\n:::\n\n\n#### Order by frequency\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg |> ggplot(aes(y = fct_rev(fct_infreq(manufacturer)))) + geom_bar()\n```\n\n::: {.cell-output-display}\n![](W03_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n\n#### Regroup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg |> ggplot(aes(y = fct_other(manufacturer, keep = c(\"dodge\", \"toyota\", \"volkswagen\")))) + geom_bar()\n```\n\n::: {.cell-output-display}\n![](W03_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n:::\n\n\n:::\n\n## Dates {.smaller}\n:::: {.columns}\n\n::: {.column width='60%'}\n- ISO 8601 standard for dates: **YYYY-MM-DD**. Today: 2025-08-31.\n- Dates in R are numeric vectors that represent the number of days since 1 January 1970.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- as.Date(\"2020-01-01\"); y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2020-01-01\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\nattributes(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$class\n[1] \"Date\"\n```\n\n\n:::\n\n```{.r .cell-code}\nas.double(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 18262\n```\n\n\n:::\n\n```{.r .cell-code}\nas.double(as.Date(\"1970-01-01\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\nas.double(as.Date(\"1969-01-01\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -365\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width='40%'}\n![](https://social-coop-media.ams3.cdn.digitaloceanspaces.com/media_attachments/files/110/509/555/396/284/468/original/760b0480d20ee7d9.jpeg)\n\n<https://social.coop/@mattl/110509557203534941>\n:::\n\n::::\n\n## How many days are you old?\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.Date() - as.Date(\"1976-01-16\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 18125 days\n```\n\n\n:::\n\n```{.r .cell-code}\n# Sys.Date() gives as the current day your computer is set to\n```\n:::\n\n\n## Date-times  {.smaller}\n\nFor date-time manipulation use [`lubridate`](https://lubridate.tidyverse.org/) form the tidyverse. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- lubridate::ymd_hm(\"1970-01-01 01:00\")\n# Note: Instead of loading package `pack` to use its function `func` you can also write `pack::func`\n# This works when the package is installed even when not loaded.\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1970-01-01 01:00:00 UTC\"\n```\n\n\n:::\n\n```{.r .cell-code}\nattributes(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$class\n[1] \"POSIXct\" \"POSIXt\" \n\n$tzone\n[1] \"UTC\"\n```\n\n\n:::\n\n```{.r .cell-code}\nas.double(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3600\n```\n\n\n:::\n:::\n\n\nUTC: Coordinated Universal Time. We are in the UTC+1 timezone.    \nPOSIXct: Portable Operating System Interface, calendar time. Stores date and time in seconds with the number of seconds beginning at 1 January 1970. \n\n\n## How many seconds are you old? \n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.double(lubridate::now()) - \n as.double(lubridate::ymd_hm(\"1976-01-16_12:04\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1566031859\n```\n\n\n:::\n:::\n\n\n\n\n\n## Summary on Factors and Dates {.smaller}\n\n- Factors\n    - Can be used to create categorical variables specified by the `levels`-attribute\n    - Often used to specify the order of categories. Particularly useful for graphics!\n    - Can be manipulated with functions from the `forcats` package\n    - Often it is sufficient to work with character vectors. \n- Dates and times\n    - Do not shy away from learning to work with dates and times properly!\n    - Tedious to get right when the date format from the data is messy, but it is worth it!\n    - Use the `lubridate` package. Usually you just need one command to convert a character vector to a date or date-time vector, but you have to customize correctly. \n\nRead the chapter of factors and dates in [R for Data Science](https://r4ds.hadley.nz)\n\n",
    "supporting": [
      "W03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}